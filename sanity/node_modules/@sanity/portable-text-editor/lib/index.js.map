{"version":3,"file":"index.js","sources":["../src/utils/schema.ts","../src/utils/getPortableTextMemberSchemaTypes.ts","../src/utils/debug.ts","../src/editor/hooks/usePortableTextEditorKeyGenerator.ts","../src/utils/weakMaps.ts","../../../../node_modules/@sanity/diff-match-patch/dist/index.js","../src/patch/patches.ts","../src/utils/values.ts","../src/utils/operationToPatches.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/utils/withPreserveKeys.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/withoutPatching.ts","../src/patch/arrayInsert.ts","../src/patch/array.ts","../src/patch/object.ts","../src/patch/primitive.ts","../src/patch/string.ts","../src/patch/applyPatch.ts","../src/utils/applyPatch.ts","../src/utils/withChanges.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/createWithHotKeys.ts","../src/utils/validateValue.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/plugins/index.ts","../src/editor/components/SlateContainer.tsx","../src/editor/hooks/usePortableTextEditorSelection.ts","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/hooks/usePortableTextEditorValue.ts","../src/editor/hooks/usePortableTextReadOnly.ts","../src/editor/hooks/useSyncValue.ts","../src/editor/components/Synchronizer.tsx","../src/editor/PortableTextEditor.tsx","../src/utils/patches.ts","../src/utils/selection.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/editor/components/Leaf.tsx","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/useForwardedRef.ts","../src/editor/Editable.tsx"],"sourcesContent":["import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function getPortableTextMemberSchemaTypes(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as BlockSchemaType | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find((field) => field.name === 'children') as\n    | {type: ArraySchemaType}\n    | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error('Valid types for block children not found in schema (required)')\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter((memberType) => memberType.name !== 'span') ||\n    []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter((field) => field.name !== blockType.name) ||\n    []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === 'style')\n  if (!styleField) {\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\")\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter((style: {value: string}) => style.value)\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find((btField) => btField.name === 'listItem')\n  if (!listField) {\n    throw new Error(\"A field with name 'listItem' is not defined in the block type (required).\")\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {randomKey} from '@sanity/util/content'\nimport {createContext, useContext} from 'react'\n\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\n/**\n * A React context for sharing the editor's keyGenerator.\n */\nexport const PortableTextEditorKeyGeneratorContext =\n  createContext<() => string>(defaultKeyGenerator)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorKeyGenerator = (): (() => string) => {\n  const keyGenerator = useContext(PortableTextEditorKeyGeneratorContext)\n\n  if (keyGenerator === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorKeyGenerator\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return keyGenerator\n}\n","import {Editor, Element, Range} from 'slate'\nimport {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor currently producing local changes that are not yet submitted?\nexport const IS_PROCESSING_LOCAL_CHANGES: WeakMap<Editor, boolean> = new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> = new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<Editor, 'top' | 'bottom'> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<Range, EditorSelection>()\n","function isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction cloneDiff(diff) {\n  const [type, patch] = diff;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA;\n  let text2 = textB;\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) {\n    return 0;\n  }\n  if (text1Length > text2Length) {\n    text1 = text1.substring(text1Length - text2Length);\n  } else if (text1Length < text2Length) {\n    text2 = text2.substring(0, text1Length);\n  }\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) {\n    return textLength;\n  }\n  let best = 0;\n  let length = 1;\n  for (let found = 0; found !== -1;) {\n    const pattern = text1.substring(textLength - length);\n    found = text2.indexOf(pattern);\n    if (found === -1) {\n      return best;\n    }\n    length += found;\n    if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerStart = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid)) {\n      pointerMin = pointerMid;\n      pointerStart = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerEnd = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd)) {\n      pointerMin = pointerMid;\n      pointerEnd = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let lengthInsertions1 = 0;\n  let lengthDeletions1 = 0;\n  let lengthInsertions2 = 0;\n  let lengthDeletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      equalities[equalitiesLength++] = pointer;\n      lengthInsertions1 = lengthInsertions2;\n      lengthDeletions1 = lengthDeletions2;\n      lengthInsertions2 = 0;\n      lengthDeletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      if (diffs[pointer][0] === DIFF_INSERT) {\n        lengthInsertions2 += diffs[pointer][1].length;\n      } else {\n        lengthDeletions2 += diffs[pointer][1].length;\n      }\n      if (lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        lengthInsertions1 = 0;\n        lengthDeletions1 = 0;\n        lengthInsertions2 = 0;\n        lengthDeletions2 = 0;\n        lastEquality = null;\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  diffs = cleanupSemanticLossless(diffs);\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1];\n      const insertion = diffs[pointer][1];\n      const overlapLength1 = getCommonOverlap(deletion, insertion);\n      const overlapLength2 = getCommonOverlap(insertion, deletion);\n      if (overlapLength1 >= overlapLength2) {\n        if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);\n          diffs[pointer + 1][1] = insertion.substring(overlapLength1);\n          pointer++;\n        }\n      } else if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {\n        diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);\n        diffs[pointer - 1][0] = DIFF_INSERT;\n        diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);\n        diffs[pointer + 1][0] = DIFF_DELETE;\n        diffs[pointer + 1][1] = deletion.substring(overlapLength2);\n        pointer++;\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/;\nconst whitespaceRegex = /\\s/;\nconst linebreakRegex = /[\\r\\n]/;\nconst blanklineEndRegex = /\\n\\r?\\n$/;\nconst blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map(diff => cloneDiff(diff));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) {\n      return 6;\n    }\n    const char1 = one.charAt(one.length - 1);\n    const char2 = two.charAt(0);\n    const nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex);\n    const nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex);\n    const whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex);\n    const whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex);\n    const lineBreak1 = whitespace1 && char1.match(linebreakRegex);\n    const lineBreak2 = whitespace2 && char2.match(linebreakRegex);\n    const blankLine1 = lineBreak1 && one.match(blanklineEndRegex);\n    const blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    if (blankLine1 || blankLine2) {\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      return 1;\n    }\n    return 0;\n  }\n  let pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1];\n      let edit = diffs[pointer][1];\n      let equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1;\n      let bestEdit = edit;\n      let bestEquality2 = equality2;\n      let bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] !== bestEquality1) {\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  let commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        if (countDelete + countInsert > 1) {\n          if (countDelete !== 0 && countInsert !== 0) {\n            commonlength = getCommonPrefix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {\n                diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);\n                pointer++;\n              }\n              textInsert = textInsert.substring(commonlength);\n              textDelete = textDelete.substring(commonlength);\n            }\n            commonlength = getCommonSuffix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];\n              textInsert = textInsert.substring(0, textInsert.length - commonlength);\n              textDelete = textDelete.substring(0, textDelete.length - commonlength);\n            }\n          }\n          pointer -= countDelete + countInsert;\n          diffs.splice(pointer, countDelete + countInsert);\n          if (textDelete.length) {\n            diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]);\n            pointer++;\n          }\n          if (textInsert.length) {\n            diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]);\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop();\n  }\n  let hasChanges = false;\n  pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        hasChanges = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction trueCount() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs) {\n  let editCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let preIns = false;\n  let preDel = false;\n  let postIns = false;\n  let postDel = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].length < editCost && (postIns || postDel)) {\n        equalities[equalitiesLength++] = pointer;\n        preIns = postIns;\n        preDel = postDel;\n        lastEquality = diffs[pointer][1];\n      } else {\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      postIns = false;\n      postDel = false;\n    } else {\n      if (diffs[pointer][0] === DIFF_DELETE) {\n        postDel = true;\n      } else {\n        postIns = true;\n      }\n      if (lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        lastEquality = null;\n        if (preIns && preDel) {\n          postIns = true;\n          postDel = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          postIns = false;\n          postDel = false;\n        }\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  const maxD = Math.ceil((text1Length + text2Length) / 2);\n  const vOffset = maxD;\n  const vLength = 2 * maxD;\n  const v1 = new Array(vLength);\n  const v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[vOffset + 1] = 0;\n  v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length;\n  const front = delta % 2 !== 0;\n  let k1start = 0;\n  let k1end = 0;\n  let k2start = 0;\n  let k2end = 0;\n  for (let d = 0; d < maxD; d++) {\n    if (Date.now() > deadline) {\n      break;\n    }\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {\n        x1 = v1[k1Offset + 1];\n      } else {\n        x1 = v1[k1Offset - 1] + 1;\n      }\n      let y1 = x1 - k1;\n      while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1Offset] = x1;\n      if (x1 > text1Length) {\n        k1end += 2;\n      } else if (y1 > text2Length) {\n        k1start += 2;\n      } else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {\n        x2 = v2[k2Offset + 1];\n      } else {\n        x2 = v2[k2Offset - 1] + 1;\n      }\n      let y2 = x2 - k2;\n      while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2Offset] = x2;\n      if (x2 > text1Length) {\n        k2end += 2;\n      } else if (y2 > text2Length) {\n        k2start += 2;\n      } else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset];\n          const y1 = vOffset + x1 - k1Offset;\n          x2 = text1Length - x2;\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x);\n  const text2a = text2.substring(0, y);\n  const text1b = text1.substring(x);\n  const text2b = text2.substring(y);\n  const diffs = doDiff(text1a, text2a, {\n    checkLines: false,\n    deadline\n  });\n  const diffsb = doDiff(text1b, text2b, {\n    checkLines: false,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (timeout <= 0) {\n    return null;\n  }\n  const longText = text1.length > text2.length ? text1 : text2;\n  const shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) {\n    return null;\n  }\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4));\n  const halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) {\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  } else if (!halfMatch1 && !halfMatch2) {\n    return null;\n  } else if (!halfMatch2) {\n    halfMatch = halfMatch1;\n  } else if (!halfMatch1) {\n    halfMatch = halfMatch2;\n  }\n  if (!halfMatch) {\n    throw new Error(\"Unable to find a half match.\");\n  }\n  let text1A;\n  let text1B;\n  let text2A;\n  let text2B;\n  if (text1.length > text2.length) {\n    text1A = halfMatch[0];\n    text1B = halfMatch[1];\n    text2A = halfMatch[2];\n    text2B = halfMatch[3];\n  } else {\n    text2A = halfMatch[0];\n    text2B = halfMatch[1];\n    text1A = halfMatch[2];\n    text1B = halfMatch[3];\n  }\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1;\n  let bestCommon = \"\";\n  let bestLongTextA;\n  let bestLongTextB;\n  let bestShortTextA;\n  let bestShortTextB;\n  while ((j = shortText.indexOf(seed, j + 1)) !== -1) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j));\n    const suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    if (bestCommon.length < suffixLength + prefixLength) {\n      bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength);\n      bestLongTextA = longText.slice(0, i - suffixLength);\n      bestLongTextB = longText.slice(i + prefixLength);\n      bestShortTextA = shortText.slice(0, j - suffixLength);\n      bestShortTextB = shortText.slice(j + prefixLength);\n    }\n  }\n  if (bestCommon.length * 2 >= longText.length) {\n    return [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"];\n  }\n  return null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1];\n    const text = [];\n    for (let y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [];\n  const lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\";\n    let lineStart = 0;\n    let lineEnd = -1;\n    let lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf(\"\\n\", lineStart);\n      if (lineEnd === -1) {\n        lineEnd = text.length - 1;\n      }\n      let line = text.slice(lineStart, lineEnd + 1);\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength === maxLines) {\n          line = text.slice(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA;\n  let text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: false,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray);\n  diffs = cleanupSemantic(diffs);\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);\n          pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: false,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, aa[j]);\n          }\n          pointer += aa.length;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  diffs.pop();\n  return diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) {\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    return [[DIFF_DELETE, text1]];\n  }\n  const longtext = text1.length > text2.length ? text1 : text2;\n  const shorttext = text1.length > text2.length ? text2 : text1;\n  const i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    if (text1.length > text2.length) {\n      diffs[0][0] = DIFF_DELETE;\n      diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length === 1) {\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0];\n    const text1B = halfMatch[1];\n    const text2A = halfMatch[2];\n    const text2B = halfMatch[3];\n    const midCommon = halfMatch[4];\n    const diffsA = doDiff(text1A, text2A, opts);\n    const diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  if (opts.checkLines && text1.length > 100 && text2.length > 100) {\n    return doLineModeDiff(text1, text2, opts);\n  }\n  return bisect(text1, text2, opts.deadline);\n}\nconst DIFF_DELETE = -1;\nconst DIFF_INSERT = 1;\nconst DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) {\n    throw new Error(\"Null input. (diff)\");\n  }\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  adjustDiffForSurrogatePairs(diffs);\n  return diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA;\n  let text2 = textB;\n  if (text1 === text2) {\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  }\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n  commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diffs = cleanupMerge(diffs);\n  return diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  if (typeof timeout !== \"undefined\") {\n    t = timeout <= 0 ? Number.MAX_VALUE : timeout;\n  }\n  return Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return {\n    checkLines: true,\n    deadline: createDeadLine(opts.timeout || 1),\n    ...opts\n  };\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null;\n  let deleteIdx = null;\n  let j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length === 0) {\n      continue;\n    }\n    if (op === DIFF_INSERT) {\n      if (insertIdx === null) {\n        insertIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_DELETE) {\n      if (deleteIdx === null) {\n        deleteIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_EQUAL) {\n      if (insertIdx === null && deleteIdx === null) {\n        const [rest, char2] = splitChar(diffs[i][1], dir);\n        diffs[i][1] = rest;\n        diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n        return;\n      }\n      break;\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv);\n    const [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText;\n    diffs[deleteIdx][1] = deleteText;\n    diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text;\n  if (insertIdx === null) {\n    diffs.splice(j, 0, [DIFF_INSERT, char]);\n    if (deleteIdx !== null && deleteIdx >= j) deleteIdx++;\n  } else {\n    diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv);\n  }\n  if (deleteIdx === null) {\n    diffs.splice(j, 0, [DIFF_DELETE, char]);\n  } else {\n    diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n  }\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0];\n    const lastChar = diffText[diffText.length - 1];\n    if (isHighSurrogate(lastChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, 1);\n    }\n    if (isLowSurrogate(firstChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, -1);\n    }\n  }\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i][1].length === 0) {\n      diffs.splice(i, 1);\n    }\n  }\n}\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return {\n    ...DEFAULT_OPTIONS,\n    ...options\n  };\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (pattern.length > MAX_BITS$1) {\n    throw new Error(\"Pattern too long for this browser.\");\n  }\n  const options = applyDefaults(opts);\n  const s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length;\n    const proximity = Math.abs(loc - x);\n    if (!options.distance) {\n      return proximity ? 1 : accuracy;\n    }\n    return accuracy + proximity / options.distance;\n  }\n  let scoreThreshold = options.threshold;\n  let bestLoc = text.indexOf(pattern, loc);\n  if (bestLoc !== -1) {\n    scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    bestLoc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (bestLoc !== -1) {\n      scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    }\n  }\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin;\n  let binMid;\n  let binMax = pattern.length + text.length;\n  let lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    binMin = 0;\n    binMid = binMax;\n    while (binMin < binMid) {\n      if (getBitapScore(d, loc + binMid) <= scoreThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length;\n    const rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) {\n          scoreThreshold = score;\n          bestLoc = j - 1;\n          if (bestLoc > loc) {\n            start = Math.max(1, 2 * loc - bestLoc);\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) {\n      break;\n    }\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null) {\n    throw new Error(\"Null input. (match())\");\n  }\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) {\n    return 0;\n  } else if (!text.length) {\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) === pattern) {\n    return loc;\n  }\n  return bitap(text, pattern, loc);\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint === \"undefined\") {\n      throw new Error(\"Failed to get codepoint\");\n    }\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let byteOffset = 0;\n  let idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target;) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint === \"undefined\") {\n        return idx;\n      }\n      byteOffset += utf8len(codePoint);\n      if (codePoint > 65535) {\n        idx += 2;\n      } else {\n        idx += 1;\n      }\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) {\n      throw new Error(\"Failed to determine byte offset\");\n    }\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) {\n    adjusted.push({\n      diffs: patch.diffs.map(diff => cloneDiff(diff)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  }\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  if (codePoint <= 127) return 1;\n  if (codePoint <= 2047) return 2;\n  if (codePoint <= 65535) return 3;\n  return 4;\n}\nconst MAX_BITS = 32;\nconst DEFAULT_MARGIN = 4;\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ...DEFAULT_OPTS,\n    ...opts\n  };\n}\nfunction make(a, b, options) {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    let diffs = diff(a, b, {\n      checkLines: true\n    });\n    if (diffs.length > 2) {\n      diffs = cleanupSemantic(diffs);\n      diffs = cleanupEfficiency(diffs);\n    }\n    return _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b === \"undefined\") {\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  }\n  if (typeof a === \"string\" && b && Array.isArray(b)) {\n    return _make(a, b, getDefaultOpts(options));\n  }\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0) {\n    return [];\n  }\n  const patches = [];\n  let patch = createPatchObject(0, 0);\n  let patchDiffLength = 0;\n  let charCount1 = 0;\n  let charCount2 = 0;\n  let utf8Count1 = 0;\n  let utf8Count2 = 0;\n  let prepatchText = textA;\n  let postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x];\n    const [diffType, diffText] = currentDiff;\n    const diffTextLength = diffText.length;\n    const diffByteLength = countUtf8Bytes(diffText);\n    if (!patchDiffLength && diffType !== DIFF_EQUAL) {\n      patch.start1 = charCount1;\n      patch.start2 = charCount2;\n      patch.utf8Start1 = utf8Count1;\n      patch.utf8Start2 = utf8Count2;\n    }\n    switch (diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff;\n        patch.length2 += diffTextLength;\n        patch.utf8Length2 += diffByteLength;\n        postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength;\n        patch.utf8Length1 += diffByteLength;\n        patch.diffs[patchDiffLength++] = currentDiff;\n        postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        if (diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1) {\n          patch.diffs[patchDiffLength++] = currentDiff;\n          patch.length1 += diffTextLength;\n          patch.length2 += diffTextLength;\n          patch.utf8Length1 += diffByteLength;\n          patch.utf8Length2 += diffByteLength;\n        } else if (diffTextLength >= 2 * options.margin) {\n          if (patchDiffLength) {\n            addContext(patch, prepatchText, options);\n            patches.push(patch);\n            patch = createPatchObject(-1, -1);\n            patchDiffLength = 0;\n            prepatchText = postpatchText;\n            charCount1 = charCount2;\n            utf8Count1 = utf8Count2;\n          }\n        }\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    if (diffType !== DIFF_INSERT) {\n      charCount1 += diffTextLength;\n      utf8Count1 += diffByteLength;\n    }\n    if (diffType !== DIFF_DELETE) {\n      charCount2 += diffTextLength;\n      utf8Count2 += diffByteLength;\n    }\n  }\n  if (patchDiffLength) {\n    addContext(patch, prepatchText, options);\n    patches.push(patch);\n  }\n  return patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0) {\n    return;\n  }\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  let padding = 0;\n  while (text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin) {\n    padding += opts.margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  }\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  if (prefixStart >= 1 && isLowSurrogate(text[prefixStart])) {\n    prefixStart--;\n  }\n  const prefix = text.substring(prefixStart, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  const prefixLength = prefix.length;\n  const prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  if (suffixEnd < text.length && isLowSurrogate(text[suffixEnd])) {\n    suffixEnd++;\n  }\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n  const suffixLength = suffix.length;\n  const suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength;\n  patch.start2 -= prefixLength;\n  patch.utf8Start1 -= prefixUtf8Length;\n  patch.utf8Start2 -= prefixUtf8Length;\n  patch.length1 += prefixLength + suffixLength;\n  patch.length2 += prefixLength + suffixLength;\n  patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length;\n  patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nfunction levenshtein(diffs) {\n  let leven = 0;\n  let insertions = 0;\n  let deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0];\n    const data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  leven += Math.max(insertions, deletions);\n  return leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0;\n  let chars2 = 0;\n  let lastChars1 = 0;\n  let lastChars2 = 0;\n  let x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      break;\n    }\n    lastChars1 = chars1;\n    lastChars2 = chars2;\n  }\n  if (diffs.length !== x && diffs[x][0] === DIFF_DELETE) {\n    return lastChars2;\n  }\n  return lastChars2 + (loc - lastChars1);\n}\nfunction addPadding(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n  for (const p of patches) {\n    p.start1 += paddingLength;\n    p.start2 += paddingLength;\n    p.utf8Start1 += paddingLength;\n    p.utf8Start2 += paddingLength;\n  }\n  let patch = patches[0];\n  let diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) {\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;\n    patch.start2 -= paddingLength;\n    patch.utf8Start1 -= paddingLength;\n    patch.utf8Start2 -= paddingLength;\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length;\n    const extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.utf8Start1 -= extraLength;\n    patch.utf8Start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) {\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction splitMax(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) {\n      continue;\n    }\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1;\n    let start2 = bigpatch.start2;\n    let preContext = \"\";\n    while (bigpatch.diffs.length !== 0) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = true;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length;\n        patch.utf8Length1 = precontextByteCount;\n        patch.length2 = preContext.length;\n        patch.utf8Length2 = precontextByteCount;\n        patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1];\n        let diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length;\n          patch.utf8Length2 += diffTextByteCount;\n          start2 += diffText.length;\n          const diff = bigpatch.diffs.shift();\n          if (diff) {\n            patch.diffs.push(diff);\n          }\n          empty = false;\n        } else if (diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize) {\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          empty = false;\n          patch.diffs.push([diffType, diffText]);\n          bigpatch.diffs.shift();\n        } else {\n          diffText = diffText.substring(0, patchSize - patch.length1 - margin);\n          diffTextByteCount = countUtf8Bytes(diffText);\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          if (diffType === DIFF_EQUAL) {\n            patch.length2 += diffText.length;\n            patch.utf8Length2 += diffTextByteCount;\n            start2 += diffText.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diffType, diffText]);\n          if (diffText === bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length);\n          }\n        }\n      }\n      preContext = diffText2(patch.diffs);\n      preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin);\n      const postContextByteCount = countUtf8Bytes(postContext);\n      if (postContext !== \"\") {\n        patch.length1 += postContext.length;\n        patch.length2 += postContext.length;\n        patch.utf8Length1 += postContextByteCount;\n        patch.utf8Length2 += postContextByteCount;\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postContext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postContext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n}\nfunction apply(patches, originalText) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof patches === \"string\") {\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  }\n  let text = originalText;\n  if (patches.length === 0) {\n    return [text, []];\n  }\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  });\n  const margin = opts.margin || DEFAULT_MARGIN;\n  const deleteThreshold = opts.deleteThreshold || 0.4;\n  const nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding;\n  splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta;\n    const text1 = diffText1(parsed[x].diffs);\n    let startLoc;\n    let endLoc = -1;\n    if (text1.length > MAX_BITS) {\n      startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc);\n      if (startLoc !== -1) {\n        endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS);\n        if (endLoc === -1 || startLoc >= endLoc) {\n          startLoc = -1;\n        }\n      }\n    } else {\n      startLoc = match(text, text1, expectedLoc);\n    }\n    if (startLoc === -1) {\n      results[x] = false;\n      delta -= parsed[x].length2 - parsed[x].length1;\n    } else {\n      results[x] = true;\n      delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1) {\n        text2 = text.substring(startLoc, startLoc + text1.length);\n      } else {\n        text2 = text.substring(startLoc, endLoc + MAX_BITS);\n      }\n      if (text1 === text2) {\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      } else {\n        let diffs = diff(text1, text2, {\n          checkLines: false\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) {\n          results[x] = false;\n        } else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0;\n          let index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {\n              text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const {\n    utf8Length1,\n    utf8Length2,\n    utf8Start1,\n    utf8Start2,\n    diffs\n  } = patch;\n  let coords1;\n  if (utf8Length1 === 0) {\n    coords1 = \"\".concat(utf8Start1, \",0\");\n  } else if (utf8Length1 === 1) {\n    coords1 = \"\".concat(utf8Start1 + 1);\n  } else {\n    coords1 = \"\".concat(utf8Start1 + 1, \",\").concat(utf8Length1);\n  }\n  let coords2;\n  if (utf8Length2 === 0) {\n    coords2 = \"\".concat(utf8Start2, \",0\");\n  } else if (utf8Length2 === 1) {\n    coords2 = \"\".concat(utf8Start2 + 1);\n  } else {\n    coords2 = \"\".concat(utf8Start2 + 1, \",\").concat(utf8Length2);\n  }\n  const text = [\"@@ -\".concat(coords1, \" +\").concat(coords2, \" @@\\n\")];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = \"\".concat(op + encodeURI(diffs[x][1]), \"\\n\");\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) {\n    return [];\n  }\n  const patches = [];\n  const lines = textline.split(\"\\n\");\n  let textPointer = 0;\n  while (textPointer < lines.length) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error(\"Invalid patch string: \".concat(lines[textPointer]));\n    }\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    patches.push(patch);\n    if (m[2] === \"\") {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.length1 = 1;\n      patch.utf8Length1 = 1;\n    } else if (m[2] === \"0\") {\n      patch.length1 = 0;\n      patch.utf8Length1 = 0;\n    } else {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.utf8Length1 = toInt(m[2]);\n      patch.length1 = patch.utf8Length1;\n    }\n    if (m[4] === \"\") {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.length2 = 1;\n      patch.utf8Length2 = 1;\n    } else if (m[4] === \"0\") {\n      patch.length2 = 0;\n      patch.utf8Length2 = 0;\n    } else {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.utf8Length2 = toInt(m[4]);\n      patch.length2 = patch.utf8Length2;\n    }\n    textPointer++;\n    while (textPointer < lines.length) {\n      const currentLine = lines[textPointer];\n      const sign = currentLine.charAt(0);\n      if (sign === \"@\") {\n        break;\n      }\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(\"Illegal escape in parse: \".concat(currentLine));\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") {\n        patch.diffs.push([DIFF_DELETE, line]);\n        patch.length1 -= utf8Diff;\n      } else if (sign === \"+\") {\n        patch.diffs.push([DIFF_INSERT, line]);\n        patch.length2 -= utf8Diff;\n      } else if (sign === \" \") {\n        patch.diffs.push([DIFF_EQUAL, line]);\n        patch.length1 -= utf8Diff;\n        patch.length2 -= utf8Diff;\n      } else {\n        throw new Error(\"Invalid patch mode \\\"\".concat(sign, \"\\\" in: \").concat(line));\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nexport { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, adjustIndiciesToUcs2, apply as applyPatches, cleanupEfficiency, cleanupSemantic, diff as makeDiff, make as makePatches, match, parse as parsePatch, stringifyPatch, stringify as stringifyPatches };\n//# sourceMappingURL=index.js.map\n","import type {Path, PathSegment} from '@sanity/types'\nimport {makePatches, stringifyPatches} from '@sanity/diff-match-patch'\n\nimport type {\n  SetIfMissingPatch,\n  InsertPatch,\n  InsertPosition,\n  SetPatch,\n  UnsetPatch,\n  DiffMatchPatch,\n} from '../types/patch'\n\nexport function setIfMissing(value: any, path: Path = []): SetIfMissingPatch {\n  return {\n    type: 'setIfMissing',\n    path,\n    value,\n  }\n}\n\nexport function diffMatchPatch(\n  currentValue: string,\n  nextValue: string,\n  path: Path = [],\n): DiffMatchPatch {\n  const patches = makePatches(currentValue, nextValue)\n  const patch = stringifyPatches(patches)\n  return {type: 'diffMatchPatch', path, value: patch}\n}\n\nexport function insert(items: any[], position: InsertPosition, path: Path = []): InsertPatch {\n  return {\n    type: 'insert',\n    path,\n    position,\n    items,\n  }\n}\n\nexport function set(value: any, path: Path = []): SetPatch {\n  return {type: 'set', path, value}\n}\n\nexport function unset(path: Path = []): UnsetPatch {\n  return {type: 'unset', path}\n}\n\nexport function prefixPath<T extends {path: Path}>(patch: T, segment: PathSegment): T {\n  return {\n    ...patch,\n    path: [segment, ...patch.path],\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Node, Element, Text, Descendant} from 'slate'\nimport {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defaultKeyGenerator as keyGenerator} from '../editor/hooks/usePortableTextEditorKeyGenerator'\n\nconst EMPTY_MARKDEFS: PortableTextObject[] = []\nconst EMPTY_MARKS: string[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [{_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []}]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = hasMissingChildren\n          ? [{_type: schemaTypes.span.name, _key: keyGenerator(), text: '', marks: []}]\n          : textBlock.children.map((child) => {\n              const {_type: cType, _key: cKey, ...cRest} = child\n              // Return 'slate' version of inline object where the actual\n              // value is stored in the `value` property.\n              // In slate, inline objects are represented as regular\n              // children with actual text node in order to be able to\n              // be selected the same way as the rest of the (text) content.\n              if (cType !== 'span') {\n                hasInlines = true\n                return keepObjectEquality(\n                  {\n                    _type: cType,\n                    _key: cKey,\n                    children: voidChildren,\n                    value: cRest,\n                    __inline: true,\n                  },\n                  keyMap,\n                )\n              }\n              // If this is a span, and it's missing 'marks', add an empty marks array\n              if (cType === 'span' && !('marks' in cRest)) {\n                return keepObjectEquality(\n                  {_key: cKey, _type: cType, ...cRest, marks: EMPTY_MARKS},\n                  keyMap,\n                )\n              }\n              // Original child object (span)\n              return child\n            })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        if (hasMissingMarkDefs) {\n          rest.markDefs = EMPTY_MARKDEFS\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (_type === textBlockType && 'children' in block && Array.isArray(block.children) && _key) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {value: v, _key: k, _type: t, __inline: _i, children: _c, ...rest} = child\n          return keepObjectEquality({...rest, ...v, _key: k as string, _type: t as string}, keyMap)\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality({...block, children, _key, _type}, keyMap) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) => Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) => isEqual({_key: child._key}, secondPathSegment))\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {omitBy, isUndefined, get} from 'lodash'\nimport {\n  Descendant,\n  InsertNodeOperation,\n  InsertTextOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  RemoveNodeOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  SplitNodeOperation,\n  Text,\n} from 'slate'\nimport {set, insert, unset, diffMatchPatch, setIfMissing} from '../patch/PatchEvent'\nimport type {Patch, InsertPosition} from '../types/patch'\nimport {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\nimport {debugWithName} from './debug'\n\nconst debug = debugWithName('operationToPatches')\ndebug.enabled = false\n\nexport function createOperationToPatches(types: PortableTextMemberSchemaTypes): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child = (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child) ? child : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(editor: PortableTextSlateEditor, operation: SetNodeOperation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}])]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          Object.keys(operation.newProperties).forEach((keyName) => {\n            const val = get(operation.newProperties, keyName)\n            patches.push(set(val, [{_key: blockKey}, 'children', {_key: childKey}, keyName]))\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert([fromSlateValue([operation.node as Descendant], textBlockName)[0]], position, [\n            {_key: targetKey},\n          ]),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert([fromSlateValue([operation.node as Descendant], textBlockName)[0]], 'before', [\n          operation.path[0],\n        ]),\n      ]\n    } else if (isTextBlock && operation.path.length === 2 && editor.children[operation.path[0]]) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1] ? 'before' : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug('Something was inserted into a void block. Not producing editor patches.')\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove =\n        editor.isTextBlock(block) && block.children && block.children[operation.path[1]]\n      if (spanToRemove) {\n        return [unset([{_key: block._key}, 'children', {_key: spanToRemove._key}])]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (operation.path.length === 2 && editor.isTextBlock(targetBlock)) {\n      const mergedSpan =\n        (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n      const targetSpan = targetBlock.children[operation.path[1] - 1]\n      if (editor.isTextSpan(targetSpan)) {\n        // Set the merged span with it's new value\n        patches.push(\n          set(targetSpan.text, [{_key: block._key}, 'children', {_key: targetSpan._key}, 'text']),\n        )\n        if (mergedSpan) {\n          patches.push(unset([{_key: block._key}, 'children', {_key: mergedSpan._key}]))\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition = operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [{_key: targetBlock._key}]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position = operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n      const childToInsert = (fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock)\n        .children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Point, Path as SlatePath, Element, Descendant} from 'slate'\nimport {isKeySegment, Path} from '@sanity/types'\nimport {EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\nimport {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath) as Path\n}\n\nexport function createArrayedPath(point: EditorSelectionPoint, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => isKeySegment(point.path[0]) && (n as Descendant)._key === point.path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) => isEqual([{_key: child._key}], childPath))\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {BaseRange, Editor, Range} from 'slate'\nimport {EditorSelection, EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  return anchor && focus ? {anchor, focus} : null\n}\n\nexport function toSlateRange(selection: EditorSelection, editor: Editor): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\n/**\n * Remove the document selection range before applying the remote patches.\n * ReactEditor (slate-react) will auto-track it's selection based on the\n * DOM-selection, and we don't want this to trigger at this point.\n * TODO (2023/06/23): refactor this when SlateReact have proper error handling.\n * See: https://github.com/ianstormtaylor/slate/pull/5407\n * @internal\n */\nexport function removeAllDocumentSelectionRanges(hasEditorSelection: boolean): void {\n  if (hasEditorSelection) {\n    const domSelection = hasEditorSelection && window.getSelection()\n    domSelection?.removeAllRanges()\n  }\n}\n","import {\n  Text,\n  Range,\n  Transforms,\n  Editor,\n  Element as SlateElement,\n  Node,\n  Path as SlatePath,\n} from 'slate'\nimport {\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n  SchemaType,\n} from '@sanity/types'\nimport {ReactEditor} from 'slate-react'\nimport {DOMNode} from 'slate-react/dist/utils/dom'\nimport {\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {toSlateValue, fromSlateValue} from '../../utils/values'\nimport {toSlateRange, toPortableTextRange} from '../../utils/ranges'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('API:editable')\n\nexport function createWithEditableAPI(\n  portableTextEditor: PortableTextEditor,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n) {\n  return function withEditableAPI(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    portableTextEditor.setEditable({\n      focus: (): void => {\n        ReactEditor.focus(editor)\n      },\n      blur: (): void => {\n        ReactEditor.blur(editor)\n      },\n      toggleMark: (mark: string): void => {\n        editor.pteToggleMark(mark)\n      },\n      toggleList: (listStyle: string): void => {\n        editor.pteToggleListItem(listStyle)\n      },\n      toggleBlockStyle: (blockStyle: string): void => {\n        editor.pteToggleBlockStyle(blockStyle)\n      },\n      isMarkActive: (mark: string): boolean => {\n        // Try/catch this, as Slate may error because the selection is currently wrong\n        // TODO: catch only relevant error from Slate\n        try {\n          return editor.pteIsMarkActive(mark)\n        } catch (err) {\n          console.warn(err)\n          return false\n        }\n      },\n      marks: (): string[] => {\n        return (\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        )\n      },\n      undo: (): void => editor.undo(),\n      redo: (): void => editor.redo(),\n      select: (selection: EditorSelection): void => {\n        const slateSelection = toSlateRange(selection, editor)\n        if (slateSelection) {\n          Transforms.select(editor, slateSelection)\n        } else {\n          Transforms.deselect(editor)\n        }\n        editor.onChange()\n      },\n      focusBlock: (): PortableTextBlock | undefined => {\n        if (editor.selection) {\n          const block = Node.descendant(editor, editor.selection.focus.path.slice(0, 1))\n          if (block) {\n            return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0]\n          }\n        }\n        return undefined\n      },\n      focusChild: (): PortableTextChild | undefined => {\n        if (editor.selection) {\n          const block = Node.descendant(editor, editor.selection.focus.path.slice(0, 1))\n          if (block && editor.isTextBlock(block)) {\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0] as PortableTextTextBlock\n            return ptBlock.children[editor.selection.focus.path[1]]\n          }\n        }\n        return undefined\n      },\n      insertChild: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus.path.slice(0, 1),\n            match: (n) => n._type === types.block.name,\n          }),\n        )[0] || [undefined]\n        if (!focusBlock) {\n          throw new Error('No focused text block')\n        }\n        if (\n          type.name !== types.span.name &&\n          !types.inlineObjects.some((t) => t.name === type.name)\n        ) {\n          throw new Error('This type cannot be inserted as a child to a text block')\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: types.block.name,\n              children: [\n                {\n                  _key: keyGenerator(),\n                  _type: type.name,\n                  ...(value ? value : {}),\n                },\n              ],\n            },\n          ],\n          portableTextEditor,\n        )[0] as unknown as SlateElement\n        const child = block.children[0]\n        const focusChildPath = editor.selection.focus.path.slice(0, 2)\n        const isSpanNode = child._type === types.span.name\n        const focusNode = Node.get(editor, focusChildPath)\n\n        // If we are inserting a span, and currently have focus on an inline object,\n        // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n        if (isSpanNode && focusNode._type !== types.span.name) {\n          debug('Inserting span child next to inline object child, moving selection + 1')\n          editor.move({distance: 1, unit: 'character'})\n        }\n\n        Transforms.insertNodes(editor, child, {\n          select: true,\n          at: editor.selection,\n        })\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types,\n          )?.focus.path || []\n        )\n      },\n      insertBlock: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: type.name,\n              ...(value ? value : {}),\n            },\n          ],\n          portableTextEditor,\n        )[0] as unknown as Node\n        Editor.insertNode(editor, block)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types,\n          )?.focus.path || []\n        )\n      },\n      hasBlockStyle: (style: string): boolean => {\n        try {\n          return editor.pteHasBlockStyle(style)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      hasListStyle: (listStyle: string): boolean => {\n        try {\n          return editor.pteHasListStyle(listStyle)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      isVoid: (element: PortableTextBlock | PortableTextChild) => {\n        return ![types.block.name, types.span.name].includes(element._type)\n      },\n      findByPath: (\n        path: Path,\n      ): [PortableTextBlock | PortableTextChild | undefined, Path | undefined] => {\n        const slatePath = toSlateRange(\n          {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n          editor,\n        )\n        if (slatePath) {\n          const [block, blockPath] = Editor.node(editor, slatePath.focus.path.slice(0, 1))\n          if (block && blockPath && typeof block._key === 'string') {\n            if (path.length === 1 && slatePath.focus.path.length === 1) {\n              return [fromSlateValue([block], types.block.name)[0], [{_key: block._key}]]\n            }\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0]\n            if (editor.isTextBlock(ptBlock)) {\n              const ptChild = ptBlock.children[slatePath.focus.path[1]]\n              if (ptChild) {\n                return [ptChild, [{_key: block._key}, 'children', {_key: ptChild._key}]]\n              }\n            }\n          }\n        }\n        return [undefined, undefined]\n      },\n      findDOMNode: (element: PortableTextBlock | PortableTextChild): DOMNode | undefined => {\n        let node: DOMNode | undefined\n        try {\n          const [item] = Array.from(\n            Editor.nodes(editor, {\n              at: [],\n              match: (n) => n._key === element._key,\n            }) || [],\n          )[0] || [undefined]\n          node = ReactEditor.toDOMNode(editor, item)\n        } catch (err) {\n          // Nothing\n        }\n        return node\n      },\n      activeAnnotations: (): PortableTextObject[] => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return []\n        }\n        try {\n          const activeAnnotations: PortableTextObject[] = []\n          const spans = Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node) =>\n              Text.isText(node) &&\n              node.marks !== undefined &&\n              Array.isArray(node.marks) &&\n              node.marks.length > 0,\n          })\n          for (const [span, path] of spans) {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block)) {\n              block.markDefs?.forEach((def) => {\n                if (\n                  Text.isText(span) &&\n                  span.marks &&\n                  Array.isArray(span.marks) &&\n                  span.marks.includes(def._key)\n                ) {\n                  activeAnnotations.push(def)\n                }\n              })\n            }\n          }\n          return activeAnnotations\n        } catch (err) {\n          return []\n        }\n      },\n      addAnnotation: (\n        type: ObjectSchemaType,\n        value?: {[prop: string]: unknown},\n      ): {spanPath: Path; markDefPath: Path} | undefined => {\n        const {selection} = editor\n        if (selection) {\n          const [block] = Editor.node(editor, selection.focus, {depth: 1})\n          if (SlateElement.isElement(block) && block._type === types.block.name) {\n            const annotationKey = keyGenerator()\n            if (editor.isTextBlock(block)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  markDefs: [\n                    ...(block.markDefs || []),\n                    {_type: type.name, _key: annotationKey, ...value} as PortableTextObject,\n                  ],\n                },\n                {at: selection.focus},\n              )\n              editor.onChange()\n              if (Range.isCollapsed(selection)) {\n                editor.pteExpandToWord()\n                editor.onChange()\n              }\n              const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n              if (editor.selection) {\n                Editor.withoutNormalizing(editor, () => {\n                  // Split if needed\n                  Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n                  if (editor.selection && Text.isText(textNode)) {\n                    Transforms.setNodes(\n                      editor,\n                      {\n                        marks: [...((textNode.marks || []) as string[]), annotationKey],\n                      },\n                      {\n                        at: editor.selection,\n                        match: (n) => n._type === types.span.name,\n                      },\n                    )\n                    editor.onChange()\n                  }\n                })\n                Editor.normalize(editor)\n                editor.onChange()\n                const newSelection = toPortableTextRange(\n                  fromSlateValue(\n                    editor.children,\n                    types.block.name,\n                    KEY_TO_VALUE_ELEMENT.get(editor),\n                  ),\n                  editor.selection,\n                  types,\n                )\n                // eslint-disable-next-line max-depth\n                if (newSelection && typeof block._key === 'string') {\n                  // Insert an empty string to continue writing non-annotated text\n                  Editor.withoutNormalizing(editor, () => {\n                    if (editor.selection) {\n                      Transforms.insertNodes(\n                        editor,\n                        [{_type: 'span', text: '', marks: [], _key: keyGenerator()}],\n                        {\n                          at: Range.end(editor.selection),\n                        },\n                      )\n                      editor.onChange()\n                    }\n                  })\n                  return {\n                    spanPath: newSelection.focus.path,\n                    markDefPath: [{_key: block._key}, 'markDefs', {_key: annotationKey}],\n                  }\n                }\n              }\n            }\n          }\n        }\n        return undefined\n      },\n      delete: (selection: EditorSelection, options?: EditableAPIDeleteOptions): void => {\n        if (selection) {\n          const range = toSlateRange(selection, editor)\n          const hasRange = range && range.anchor.path.length > 0 && range.focus.path.length > 0\n          if (!hasRange) {\n            throw new Error('Invalid range')\n          }\n          if (range) {\n            if (!options?.mode || options?.mode === 'selected') {\n              debug(`Deleting content in selection`)\n              Transforms.delete(editor, {\n                at: range,\n                hanging: true,\n                voids: true,\n              })\n              editor.onChange()\n              return\n            }\n            if (options?.mode === 'blocks') {\n              debug(`Deleting blocks touched by selection`)\n              Transforms.removeNodes(editor, {\n                at: range,\n                voids: true,\n                match: (node) => {\n                  return (\n                    editor.isTextBlock(node) ||\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                  )\n                },\n              })\n            }\n            if (options?.mode === 'children') {\n              debug(`Deleting children touched by selection`)\n              Transforms.removeNodes(editor, {\n                at: range,\n                voids: true,\n                match: (node) => {\n                  return (\n                    node._type === types.span.name || // Text children\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                  )\n                },\n              })\n            }\n            // If the editor was emptied, insert a placeholder block\n            // directly into the editor's children. We don't want to do this\n            // through a Transform (because that would trigger a change event\n            // that would insert the placeholder into the actual value\n            // which should remain empty)\n            if (editor.children.length === 0) {\n              editor.children = [editor.createPlaceholderBlock()]\n            }\n            editor.onChange()\n          }\n        }\n      },\n      removeAnnotation: (type: ObjectSchemaType): void => {\n        let {selection} = editor\n        debug('Removing annotation', type)\n        if (selection) {\n          // Select the whole annotation if collapsed\n          if (Range.isCollapsed(selection)) {\n            const [node, nodePath] = Editor.node(editor, selection, {depth: 2})\n            if (Text.isText(node) && node.marks && typeof node.text === 'string') {\n              Transforms.select(editor, nodePath)\n              selection = editor.selection\n            }\n          }\n          // Do this without normalization or span references will be unstable!\n          Editor.withoutNormalizing(editor, () => {\n            if (selection && Range.isExpanded(selection)) {\n              selection = editor.selection\n              if (!selection) {\n                return\n              }\n              // Split the span first\n              Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n              editor.onChange()\n\n              // Everything in the selection which has marks\n              const spans = [\n                ...Editor.nodes(editor, {\n                  at: selection,\n                  match: (node) =>\n                    Text.isText(node) &&\n                    node.marks !== undefined &&\n                    Array.isArray(node.marks) &&\n                    node.marks.length > 0,\n                }),\n              ]\n              spans.forEach(([span, path]) => {\n                const [block] = Editor.node(editor, path, {depth: 1})\n                if (editor.isTextBlock(block)) {\n                  block.markDefs\n                    ?.filter((def) => def._type === type.name)\n                    .forEach((def) => {\n                      if (\n                        Text.isText(span) &&\n                        Array.isArray(span.marks) &&\n                        span.marks.includes(def._key)\n                      ) {\n                        const newMarks = [...(span.marks || []).filter((mark) => mark !== def._key)]\n                        Transforms.setNodes(\n                          editor,\n                          {\n                            marks: newMarks,\n                          },\n                          {at: path, voids: false, split: false},\n                        )\n                      }\n                    })\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n          editor.onChange()\n        }\n      },\n      getSelection: (): EditorSelection | null => {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            return existing\n          }\n          ptRange = toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types,\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n        return ptRange\n      },\n      getValue: () => {\n        return fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      },\n      isCollapsedSelection: () => {\n        return !!editor.selection && Range.isCollapsed(editor.selection)\n      },\n      isExpandedSelection: () => {\n        return !!editor.selection && Range.isExpanded(editor.selection)\n      },\n      insertBreak: () => {\n        editor.insertBreak()\n        editor.onChange()\n      },\n    })\n    return editor\n  }\n}\n","import {PortableTextSlateEditor} from '../../types/editor'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(maxBlocks: number) {\n  return function withMaxBlocks(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      const rows = maxBlocks\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' || operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PRESERVE_KEYS: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withPreserveKeys(editor: Editor, fn: () => void): void {\n  const prev = isPreservingKeys(editor)\n  PRESERVE_KEYS.set(editor, true)\n  fn()\n  PRESERVE_KEYS.set(editor, prev)\n}\n\nexport function isPreservingKeys(editor: Editor): boolean | undefined {\n  return PRESERVE_KEYS.get(editor)\n}\n","import {Element, Transforms, Node, Editor} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {isPreservingKeys, PRESERVE_KEYS} from '../../utils/withPreserveKeys'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n) {\n  return function withKeys(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    PRESERVE_KEYS.set(editor, false)\n    const {apply, normalizeNode} = editor\n    editor.apply = (operation) => {\n      if (operation.type === 'split_node') {\n        operation.properties = {\n          ...operation.properties,\n          _key: keyGenerator(),\n        }\n      }\n      if (operation.type === 'insert_node') {\n        // Must be given a new key or adding/removing marks while typing gets in trouble (duped keys)!\n        const withNewKey = !isPreservingKeys(editor) || !('_key' in operation.node)\n        if (!Editor.isEditor(operation.node)) {\n          operation.node = {\n            ...operation.node,\n            ...(withNewKey ? {_key: keyGenerator()} : {}),\n          }\n        }\n      }\n      apply(operation)\n    }\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          Transforms.setNodes(editor, {_key: keyGenerator()}, {at: path})\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            Transforms.setNodes(editor, {_key: keyGenerator()}, {at: childPath})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","export const BEFORE = 'before'\nexport const AFTER = 'after'\n\nexport default function insert(array: any[], position: string, index: number, ...args: any[]) {\n  if (position !== BEFORE && position !== AFTER) {\n    throw new Error(`Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`)\n  }\n\n  const items = flatten(...args)\n\n  if (array.length === 0) {\n    return items\n  }\n\n  const len = array.length\n  const idx = Math.abs((len + index) % len) % len\n\n  const normalizedIdx = position === 'after' ? idx + 1 : idx\n\n  const copy = array.slice()\n  copy.splice(normalizedIdx, 0, ...flatten(items))\n  return copy\n}\n\nfunction flatten(...values: any[]) {\n  return values.reduce((prev, item) => prev.concat(item), [])\n}\n","import {PathSegment} from '@sanity/types'\nimport {findIndex} from 'lodash'\nimport applyPatch from './applyPatch'\nimport insert from './arrayInsert'\n\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty)\n\nfunction move(arr: any[], from: number, to: any) {\n  const nextValue = arr.slice()\n  const val = nextValue[from]\n  nextValue.splice(from, 1)\n  nextValue.splice(to, 0, val)\n  return nextValue\n}\n\nfunction findTargetIndex(array: any[], pathSegment: PathSegment) {\n  if (typeof pathSegment === 'number') {\n    return pathSegment\n  }\n  const index = findIndex(array, pathSegment)\n  return index === -1 ? false : index\n}\n\nexport default function apply(\n  value: any,\n  patch: {type: any; path: any; value: any; position: any; items: any},\n) {\n  const nextValue = value.slice() // make a copy for internal mutation\n\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'setIfMissing') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return value === undefined ? patch.value : value\n    } else if (patch.type === 'set') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'move') {\n      if (!patch.value || !hasOwn(patch.value, 'from') || !hasOwn(patch.value, 'to')) {\n        // eslint-disable-line max-depth\n        throw new Error(\n          `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n            patch.value,\n          )}`,\n        )\n      }\n      return move(nextValue, patch.value.from, patch.value.to)\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`)\n  }\n\n  const [head, ...tail] = patch.path\n\n  const index = findTargetIndex(value, head)\n\n  // If the given selector could not be found, return as-is\n  if (index === false) {\n    return nextValue\n  }\n\n  if (tail.length === 0) {\n    if (patch.type === 'insert') {\n      const {position, items} = patch\n      return insert(value, position, index, items)\n    } else if (patch.type === 'unset') {\n      if (typeof index !== 'number') {\n        throw new Error(`Expected array index to be a number, instead got \"${index}\"`)\n      }\n      nextValue.splice(index, 1)\n      return nextValue\n    }\n  }\n\n  // The patch is not directed to me\n  nextValue[index] = applyPatch(nextValue[index], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","import {omit, clone, isObject} from 'lodash'\nimport applyPatch from './applyPatch'\n\nexport default function apply(value: any, patch: {type: any; path: any; value: any}) {\n  const nextValue = clone(value)\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'set') {\n      if (!isObject(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an object to a non-object')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'setIfMissing') {\n      // console.log('IS IT missing?', value)\n      return value === undefined ? patch.value : value\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`)\n  }\n\n  // The patch is not directed to me\n  const [head, ...tail] = patch.path\n  if (typeof head !== 'string') {\n    throw new Error(`Expected field name to be a string, instad got: ${head}`)\n  }\n\n  if (tail.length === 0 && patch.type === 'unset') {\n    return omit(nextValue, head)\n  }\n\n  nextValue[head] = applyPatch(nextValue[head], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","const OPERATIONS: Record<string, any> = {\n  replace(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: any, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(_currentValue: any, _nextValue: any) {\n    return undefined\n  },\n  inc(currentValue: any, nextValue: any) {\n    return currentValue + nextValue\n  },\n  dec(currentValue: any, nextValue: any) {\n    return currentValue - nextValue\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(value: any, patch: any) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type,\n      )}\" for primitives. This is most likely a bug.`,\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path\n        .map((path: any) => JSON.stringify(path))\n        .join('.')} that targeted the value \"${JSON.stringify(value)}\"`,\n    )\n  }\n  return OPERATIONS[patch.type](value, patch.value)\n}\n","import {applyPatches, parsePatch} from '@sanity/diff-match-patch'\n\ntype fn = (oldVal: any, newVal: any) => any\nconst OPERATIONS: Record<string, fn> = {\n  replace(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: undefined, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(currentValue: any, nextValue: any) {\n    return undefined\n  },\n  diffMatchPatch(currentValue: string, nextValue: string): string {\n    const [result] = applyPatches(parsePatch(nextValue), currentValue, {\n      allowExceedingIndices: true,\n    })\n    return result\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(\n  value: string,\n  patch: {type: string; path: any[]; value: any},\n): string {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type,\n      )}\" for string. This is most likely a bug.`,\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path.join('.')} that targeted the value \"${JSON.stringify(value)}\"`,\n    )\n  }\n  const func = OPERATIONS[patch.type]\n  if (func) {\n    return func(value, patch.value)\n  }\n  throw new Error('Unknown patch type')\n}\n","import {isObject, isString} from 'lodash'\nimport applyArrayPatch from './array'\nimport applyObjectPatch from './object'\nimport applyPrimitivePatch from './primitive'\nimport applyStringPatch from './string'\n\nexport function applyAll(value: any, patches: any[]) {\n  return patches.reduce(_apply, value)\n}\n\nfunction applyPatch(value: string, patch: {type: string; path: any[]; value: any}) {\n  if (Array.isArray(value)) {\n    return applyArrayPatch(value, patch as any)\n  }\n  if (isString(value)) {\n    return applyStringPatch(value, patch)\n  }\n  if (isObject(value)) {\n    return applyObjectPatch(value, patch)\n  }\n  return applyPrimitivePatch(value, patch)\n}\n\nexport default function _apply(value: string, patch: {type: string; path: any[]; value: any}) {\n  const res = applyPatch(value, patch)\n  // console.log('applyPatch(%o, %o) : %o (noop? %o)', value, patch, res, value === res)\n  return res\n}\n","/* eslint-disable max-statements */\nimport {Transforms, Element, Path as SlatePath, Descendant, Text, Node} from 'slate'\nimport {\n  applyPatches as diffMatchPatchApplyPatches,\n  cleanupEfficiency,\n  makeDiff,\n  parsePatch,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n} from '@sanity/diff-match-patch'\nimport {\n  type Path,\n  type KeyedSegment,\n  type PathSegment,\n  type PortableTextBlock,\n  type PortableTextChild,\n} from '@sanity/types'\nimport type {Patch, InsertPatch, UnsetPatch, SetPatch, DiffMatchPatch} from '../types/patch'\nimport {applyAll} from '../patch/applyPatch'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../types/editor'\nimport {toSlateValue} from './values'\nimport {debugWithName} from './debug'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  let previousPatch: Patch | undefined\n\n  return function (editor: PortableTextSlateEditor, patch: Patch): boolean {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug('\\n\\nNEW PATCH =============================================================')\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch, previousPatch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n    previousPatch = patch\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(editor, patch.path)\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {allowExceedingIndices: true})\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx = position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx = position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {at: childInsertPath})\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(editor, patch.path)\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch, previousPatch?: Patch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((c, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.createPlaceholderBlock())\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(editor, patch.path)\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (editor.isTextBlock(block) && patch.path[1] === 'children' && patch.path.length === 3) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    const childIndex = childPath[1]\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify([childPath, childIndex])}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<PortableTextSlateEditor, 'children' | 'isTextBlock' | 'apply' | 'selection'>,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {child?: Descendant; childPath?: SlatePath; block?: Descendant; blockPath?: SlatePath} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {block, child, blockPath, childPath: blockPath?.concat(childIndex) as SlatePath}\n}\n","import {Editor} from 'slate'\nimport {IS_PROCESSING_LOCAL_CHANGES, IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n\nexport function withLocalChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingLocally(editor) || false\n  IS_PROCESSING_LOCAL_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_LOCAL_CHANGES.set(editor, prev)\n}\n\nexport function isChangingLocally(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_LOCAL_CHANGES.get(editor)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport {isEqual, flatten} from 'lodash'\nimport {Descendant, Editor, Operation, Path, SelectionOperation, Transforms} from 'slate'\nimport {DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, parsePatch} from '@sanity/diff-match-patch'\nimport {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport type {Patch} from '../../types/patch'\nimport {PatchObservable, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {removeAllDocumentSelectionRanges} from '../../utils/ranges'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  patches$?: PatchObservable\n  readOnly: boolean\n  blockSchemaType: ObjectSchemaType\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {readOnly, patches$, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches')\n        const sub = patches$.subscribe(({patches, snapshot}) => {\n          let reset = false\n          patches.forEach((patch) => {\n            if (!reset && patch.origin !== 'local' && remotePatches) {\n              if (patch.type === 'unset' && patch.path.length === 0) {\n                debug('Someone else cleared the content, resetting undo/redo history')\n                editor.history = {undos: [], redos: []}\n                remotePatches.splice(0, remotePatches.length)\n                SAVING.set(editor, true)\n                reset = true\n                return\n              }\n              remotePatches.push({patch, time: new Date(), snapshot, previousSnapshot})\n            }\n          })\n          previousSnapshot = snapshot\n        })\n        return () => {\n          debug('Unsubscribing to patches')\n          sub.unsubscribe()\n        }\n      })\n    }\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (readOnly) {\n        apply(op)\n        return\n      }\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp = step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [...(editor.selection === null ? [] : [createSelectOperation(editor)]), op],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp)\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot),\n              ),\n            )\n          })\n          removeAllDocumentSelectionRanges(!!editor.selection)\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withoutSaving(editor, () => {\n                transformedOperations\n                  .map(Operation.inverse)\n                  .reverse()\n                  .forEach((op) => {\n                    editor.apply(op)\n                  })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp)\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot),\n              ),\n            )\n          })\n          removeAllDocumentSelectionRanges(!!editor.selection)\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withoutSaving(editor, () => {\n                transformedOperations.forEach((op) => {\n                  editor.apply(op)\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(`Adjusting '${operation.type}' operation paths for '${patch.type}' patch`)\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(`Adjusting selection for unset everything patch and ${operation.type} operation`)\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation)\n    if (!operationTargetBlock || !isEqual({_key: operationTargetBlock._key}, patch.path[0])) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (changedOffset <= transformedOperation.offset - transformedOperation.text.length) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(operation: Operation, level: number, blockIndex: number): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (point && point.path[0] >= blockIndex + level && point.path[0] + level > -1) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (op: Operation, prev: Operation | undefined): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","/* eslint-disable max-nested-callbacks */\nimport {Subject} from 'rxjs'\nimport {\n  Descendant,\n  Editor,\n  InsertNodeOperation,\n  InsertTextOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  Operation,\n  RemoveNodeOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  SplitNodeOperation,\n} from 'slate'\nimport {insert, setIfMissing, unset} from '../../patch/PatchEvent'\nimport type {Patch} from '../../types/patch'\n\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  EditorChange,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {PATCHING, isPatching, withoutPatching} from '../../utils/withoutPatching'\nimport {KEY_TO_VALUE_ELEMENT, IS_PROCESSING_REMOTE_CHANGES} from '../../utils/weakMaps'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {removeAllDocumentSelectionRanges} from '../../utils/ranges'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  change$: Subject<EditorChange>\n  keyGenerator: () => string\n  patches$?: PatchObservable\n  patchFunctions: PatchFunctions\n  readOnly: boolean\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\nexport function createWithPatches({\n  change$,\n  patches$,\n  patchFunctions,\n  readOnly,\n  schemaTypes,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              withPreserveKeys(editor, () => {\n                patches.forEach((patch) => {\n                  if (patch.type === 'insert' || patch.type === 'unset') {\n                    removeAllDocumentSelectionRanges(!!editor.selection)\n                  }\n                  if (debug.enabled) debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                  changed = applyPatch(editor, patch)\n                })\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches$')\n        const sub = patches$.subscribe(handlePatches)\n        return () => {\n          debug('Unsubscribing to patches$')\n          sub.unsubscribe()\n        }\n      })\n    }\n\n    editor.apply = (operation: Operation): void | Editor => {\n      if (readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(`Editor is not producing patch for operation ${operation.type}`, operation)\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (editorWasEmpty && !editorIsEmpty && operation.type !== 'set_selection') {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_selection':\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(operation.type)\n      ) {\n        patches = [...patches, unset([])]\n        change$.next({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          change$.next({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Descendant} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock({\n  schemaTypes,\n  keyGenerator,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.createPlaceholderBlock = (): Descendant => {\n      debug('Creating placeholder block')\n      return {\n        _type: schemaTypes.block.name,\n        _key: keyGenerator(),\n        style: schemaTypes.styles[0].value || 'normal',\n        markDefs: [],\n        children: [\n          {\n            _type: 'span',\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          },\n        ],\n      }\n    }\n    return editor\n  }\n}\n","import {Editor, Transforms, Element, Path, Text as SlateText, Node} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      const [, path] = nodeEntry\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            Transforms.setNodes(editor, {style: defaultStyle}, {at: [op.path[0] + 1], voids: false})\n            break\n          }\n        }\n      }\n    }\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(editor, {...node, style: defaultStyle} as Partial<Node>, {\n            at: path,\n          })\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as Partial<Node>,\n            {at: path},\n          )\n        }\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Transforms, Element, Text, Node} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(types: PortableTextMemberSchemaTypes) {\n  return function withPortableTextLists(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as Partial<Node>\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem: listItemStyle || (types.lists[0] && types.lists[0].value),\n          } as Partial<Node>,\n          {at: path},\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            },\n            {at: path},\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug('Decrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          } else {\n            level++\n            debug('Incrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path},\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isListBlock(node) && node.listItem === listStyle,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","/* eslint-disable complexity */\n/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isEqual, flatten, uniq} from 'lodash'\nimport {Editor, Range, Transforms, Text, Path, NodeEntry, Element, Descendant} from 'slate'\n\nimport {Subject} from 'rxjs'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  EditorChange,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {toPortableTextRange} from '../../utils/ranges'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  types: PortableTextMemberSchemaTypes,\n  change$: Subject<EditorChange>,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Selections are normally emitted automatically via\n    // onChange, but they will keep the object reference if\n    // the selection is the same as the previous.\n    // When toggling marks however, it might not even\n    // result in a onChange event (for instance when nothing is selected),\n    // and if you toggle marks on a block with one single span,\n    // the selection would also stay the same.\n    // We should force a new selection object here when toggling marks,\n    // because toolbars and other things can very conveniently\n    // be memo'ed on the editor selection to update itself.\n    const forceNewSelection = () => {\n      if (editor.selection) {\n        Transforms.select(editor, {...editor.selection})\n        editor.selection = {...editor.selection} // Ensure new object\n      }\n      const ptRange = toPortableTextRange(editor.children, editor.selection, types)\n      change$.next({type: 'selection', selection: ptRange})\n    }\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      if (\n        editor.operations.some((op) =>\n          [\n            'insert_node',\n            'insert_text',\n            'merge_node',\n            'remove_node',\n            'remove_text',\n            'set_node',\n          ].includes(op.type),\n        )\n      ) {\n        mergeSpans(editor)\n      }\n      const [node, path] = nodeEntry\n      const isSpan = Text.isText(node) && node._type === types.span.name\n      const isTextBlock = editor.isTextBlock(node)\n      if (isSpan || isTextBlock) {\n        if (isSpan && !Array.isArray(node.marks)) {\n          debug('Adding .marks to span node')\n          Transforms.setNodes(editor, {marks: []}, {at: path})\n          editor.onChange()\n        }\n        for (const op of editor.operations) {\n          // Make sure markDefs are copied over when merging two blocks.\n          if (\n            op.type === 'merge_node' &&\n            op.path.length === 1 &&\n            'markDefs' in op.properties &&\n            op.properties._type === types.block.name &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] - 1 >= 0\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n            debug(`Copying markDefs over to merged block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n              const isNormalized = isEqual(newMarkDefs, targetBlock.markDefs)\n              // eslint-disable-next-line max-depth\n              if (!isNormalized) {\n                Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: targetPath, voids: false})\n                editor.onChange()\n              }\n            }\n          }\n          // Make sure markDefs are copied over to new block when splitting a block.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            Element.isElementProps(op.properties) &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] + 1])\n            debug(`Copying markDefs over to split block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              Transforms.setNodes(\n                editor,\n                {markDefs: uniq([...oldDefs, ...op.properties.markDefs])},\n                {at: targetPath, voids: false},\n              )\n              editor.onChange()\n            }\n          }\n          // Make sure marks are reset, if a block is split at the end.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 2 &&\n            (op.properties as unknown as Descendant)._type === types.span.name &&\n            'marks' in op.properties &&\n            Array.isArray(op.properties.marks) &&\n            op.properties.marks.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [child, childPath] = Editor.node(editor, [op.path[0] + 1, 0])\n            if (\n              Text.isText(child) &&\n              child.text === '' &&\n              Array.isArray(child.marks) &&\n              child.marks.length > 0\n            ) {\n              Transforms.setNodes(editor, {marks: []}, {at: childPath, voids: false})\n              editor.onChange()\n            }\n          }\n          // Make sure markDefs are reset, if a block is split at start.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            (op.properties as unknown as Descendant)._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0\n          ) {\n            const [block, blockPath] = Editor.node(editor, [op.path[0]])\n            if (\n              editor.isTextBlock(block) &&\n              block.children.length === 1 &&\n              block.markDefs &&\n              block.markDefs.length > 0 &&\n              Text.isText(block.children[0]) &&\n              block.children[0].text === '' &&\n              (!block.children[0].marks || block.children[0].marks.length === 0)\n            ) {\n              Transforms.setNodes(editor, {markDefs: []}, {at: blockPath})\n              editor.onChange()\n            }\n          }\n        }\n        // Empty marks if text is empty\n        if (\n          isSpan &&\n          Array.isArray(node.marks) &&\n          (!node.marks || (node.marks.length > 0 && node.text === ''))\n        ) {\n          Transforms.setNodes(editor, {marks: []}, {at: path, voids: false})\n          editor.onChange()\n        }\n      }\n      // Check consistency of markDefs\n      if (\n        isTextBlock &&\n        editor.operations.some((op) =>\n          ['split_node', 'remove_node', 'remove_text', 'merge_node'].includes(op.type),\n        )\n      ) {\n        normalizeMarkDefs(editor)\n      }\n    }\n\n    // Special hook before inserting text at the end of an annotation.\n    editor.apply = (op) => {\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        if (\n          selection &&\n          Range.isCollapsed(selection) &&\n          Editor.marks(editor)?.marks?.some((mark) => !decorators.includes(mark))\n        ) {\n          const [node] = Array.from(\n            Editor.nodes(editor, {\n              mode: 'lowest',\n              at: selection.focus,\n              match: (n) => (n as unknown as Descendant)._type === types.span.name,\n              voids: false,\n            }),\n          )[0] || [undefined]\n          if (\n            Text.isText(node) &&\n            node.text.length === selection.focus.offset &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0\n          ) {\n            apply(op)\n            Transforms.splitNodes(editor, {\n              match: Text.isText,\n              at: {...selection.focus, offset: selection.focus.offset},\n            })\n            const marksWithoutAnnotationMarks: string[] = (\n              {\n                ...(Editor.marks(editor) || {}),\n              }.marks || []\n            ).filter((mark) => decorators.includes(mark))\n            Transforms.setNodes(\n              editor,\n              {marks: marksWithoutAnnotationMarks},\n              {at: Path.next(selection.focus.path)},\n            )\n            debug('Inserting text at end of annotation')\n            return\n          }\n        }\n      }\n      apply(op)\n    }\n\n    // Override built in addMark function\n    editor.addMark = (mark: string) => {\n      if (editor.selection) {\n        if (Range.isExpanded(editor.selection)) {\n          // Split if needed\n          Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n          // Use new selection\n          const splitTextNodes = [\n            ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n          ]\n          const shouldRemoveMark = flatten(\n            splitTextNodes.map((item) => item[0]).map((node) => node.marks),\n          ).includes(mark)\n          if (shouldRemoveMark) {\n            editor.removeMark(mark)\n            return editor\n          }\n          Editor.withoutNormalizing(editor, () => {\n            splitTextNodes.forEach(([node, path]) => {\n              const marks = [\n                ...(Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                mark,\n              ]\n              Transforms.setNodes(\n                editor,\n                {marks},\n                {at: path, match: Text.isText, split: true, hanging: true},\n              )\n            })\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: [...existingMarks, mark],\n          }\n          editor.marks = marks as Text\n          forceNewSelection()\n          return editor\n        }\n        editor.onChange()\n        forceNewSelection()\n      }\n      return editor\n    }\n\n    // Override built in removeMark function\n    editor.removeMark = (mark: string) => {\n      const {selection} = editor\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Editor.withoutNormalizing(editor, () => {\n            // Split if needed\n            Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n            if (editor.selection) {\n              const splitTextNodes = [\n                ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n              ]\n              splitTextNodes.forEach(([node, path]) => {\n                const block = editor.children[path[0]]\n                if (Element.isElement(block) && block.children.includes(node)) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                        (eMark: string) => eMark !== mark,\n                      ),\n                      _type: 'span',\n                    },\n                    {at: path},\n                  )\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: existingMarks.filter((eMark) => eMark !== mark),\n          } as Text\n          editor.marks = {marks: marks.marks, _type: 'span'} as Text\n          forceNewSelection()\n          return editor\n        }\n        editor.onChange()\n        forceNewSelection()\n      }\n      return editor\n    }\n\n    editor.pteIsMarkActive = (mark: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      let existingMarks =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      if (Range.isExpanded(editor.selection)) {\n        Array.from(Editor.nodes(editor, {match: Text.isText, at: editor.selection})).forEach(\n          (n) => {\n            const [node] = n as NodeEntry<Text>\n            existingMarks = uniq([...existingMarks, ...((node.marks as string[]) || [])])\n          },\n        )\n      }\n      return existingMarks.includes(mark)\n    }\n\n    // Custom editor function to toggle a mark\n    editor.pteToggleMark = (mark: string) => {\n      const isActive = editor.pteIsMarkActive(mark)\n      if (isActive) {\n        debug(`Remove mark '${mark}'`)\n        Editor.removeMark(editor, mark)\n      } else {\n        debug(`Add mark '${mark}'`)\n        Editor.addMark(editor, mark, true)\n      }\n    }\n    return editor\n  }\n\n  /**\n   * Normalize re-marked spans in selection\n   */\n  function mergeSpans(editor: PortableTextSlateEditor) {\n    const {selection} = editor\n    if (selection) {\n      for (const [node, path] of Array.from(\n        Editor.nodes(editor, {\n          at: Editor.range(editor, [selection.anchor.path[0]], [selection.focus.path[0]]),\n        }),\n      ).reverse()) {\n        const [parent] = path.length > 1 ? Editor.node(editor, Path.parent(path)) : [undefined]\n        const nextPath = [path[0], path[1] + 1]\n        if (editor.isTextBlock(parent)) {\n          const nextNode = parent.children[nextPath[1]]\n          if (Text.isText(node) && Text.isText(nextNode) && isEqual(nextNode.marks, node.marks)) {\n            debug('Merging spans')\n            Transforms.mergeNodes(editor, {at: nextPath, voids: true})\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Normalize markDefs\n   *\n   */\n  function normalizeMarkDefs(editor: PortableTextSlateEditor) {\n    const {selection} = editor\n    if (selection) {\n      const blocks = Editor.nodes(editor, {\n        at: selection,\n        match: (n) => (n as unknown as Descendant)._type === types.block.name,\n      })\n      for (const [block, path] of blocks) {\n        if (editor.isTextBlock(block)) {\n          const newMarkDefs = (block.markDefs || []).filter((def) => {\n            return block.children.find((child) => {\n              return (\n                Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)\n              )\n            })\n          })\n          if (!isEqual(newMarkDefs, block.markDefs)) {\n            debug('Removing markDef not in use')\n            Transforms.setNodes(\n              editor,\n              {\n                markDefs: newMarkDefs,\n              },\n              {at: path},\n            )\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n}\n","import {Subject} from 'rxjs'\nimport {BaseRange} from 'slate'\nimport {\n  EditorChange,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {ObjectWithKeyAndType, toPortableTextRange} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  change$: Subject<EditorChange>,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          change$.next({type: 'selection', selection: ptRange})\n        } else {\n          change$.next({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {Element, Operation, InsertNodeOperation, Text as SlateText, Transforms} from 'slate'\nimport {\n  isPortableTextTextBlock,\n  PortableTextTextBlock,\n  isPortableTextSpan,\n  PortableTextSpan,\n  PortableTextListBlock,\n  isPortableTextListBlock,\n} from '@sanity/types'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  schemaTypes,\n  keyGenerator,\n}: {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}) {\n  return function withSchemaTypes(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type == schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects.map((obj) => obj.name).includes(element._type) ||\n          schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization to add `_type: 'span'` to texts if they are inserted without\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key = span._key || keyGenerator()\n        Transforms.setNodes(editor, {...span, _type: schemaTypes.span.name, _key: key}, {at: path})\n      }\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Transforms, Text} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({schemaTypes, keyGenerator}: Options) {\n  return function withUtils(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0\n        const whiteSpaceAfterIndex = charsAfter.split('').findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1)\n        if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n    return editor\n  }\n}\n","/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport {Editor, Transforms, Path, Range, Node} from 'slate'\nimport isHotkey from 'is-hotkey'\nimport {ReactEditor} from 'slate-react'\nimport {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {SlateTextBlock, VoidElement} from '../../types/slate'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  const createEmptyBlock = () =>\n    toSlateValue(\n      [\n        {\n          _type: types.block.name,\n          _key: keyGenerator(),\n          style: 'normal',\n          markDefs: [],\n          children: [\n            {\n              _type: 'span',\n              _key: keyGenerator(),\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n      ],\n      portableTextEditor,\n    )[0]\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editor.pteToggleMark(mark)\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isBackspace = isHotkey('backspace', event.nativeEvent)\n      const isDelete = isHotkey('delete', event.nativeEvent)\n\n      // Disallow deleting void blocks by backspace from another line.\n      // Otherwise it's so easy to delete the void block above when trying to delete text on\n      // the line below or above\n      if (\n        isBackspace &&\n        editor.selection &&\n        editor.selection.focus.path[0] > 0 &&\n        Range.isCollapsed(editor.selection)\n      ) {\n        const prevPath = Path.previous(editor.selection.focus.path.slice(0, 1))\n        const prevBlock = Node.descendant(editor, prevPath) as SlateTextBlock | VoidElement\n        const focusBlock = Node.descendant(editor, editor.selection.focus.path.slice(0, 1))\n        if (\n          prevBlock &&\n          focusBlock &&\n          Editor.isVoid(editor, prevBlock) &&\n          editor.selection.focus.offset === 0\n        ) {\n          debug('Preventing deleting void block above')\n          event.preventDefault()\n          event.stopPropagation()\n\n          const isTextBlock = isPortableTextTextBlock(focusBlock)\n          const isEmptyFocusBlock =\n            isTextBlock && focusBlock.children.length === 1 && focusBlock.children?.[0]?.text === ''\n\n          // If this is a not an text block or it is empty, simply remove it\n          if (!isTextBlock || isEmptyFocusBlock) {\n            Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n            Transforms.select(editor, prevPath)\n\n            editor.onChange()\n            return\n          }\n\n          // If the focused block is a text node but it isn't empty, focus on the previous block\n          if (isTextBlock && !isEmptyFocusBlock) {\n            Transforms.select(editor, prevPath)\n\n            editor.onChange()\n            return\n          }\n\n          return\n        }\n      }\n      if (\n        isDelete &&\n        editor.selection &&\n        editor.selection.focus.offset === 0 &&\n        Range.isCollapsed(editor.selection) &&\n        editor.children[editor.selection.focus.path[0] + 1]\n      ) {\n        const nextBlock = Node.descendant(\n          editor,\n          Path.next(editor.selection.focus.path.slice(0, 1)),\n        ) as SlateTextBlock | VoidElement\n        const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n        const focusBlock = Node.descendant(editor, focusBlockPath) as SlateTextBlock | VoidElement\n\n        if (\n          nextBlock &&\n          focusBlock &&\n          !Editor.isVoid(editor, focusBlock) &&\n          Editor.isVoid(editor, nextBlock)\n        ) {\n          debug('Preventing deleting void block below')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, focusBlockPath)\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      // Only steal tab when we are on a plain text span or we are at the start of the line (fallback if the whole block is annotated or contains a single inline object)\n      // Otherwise tab is reserved for accessability for buttons etc.\n      if ((isTab || isShiftTab) && editor.selection) {\n        const [focusChild] = Editor.node(editor, editor.selection.focus, {depth: 2})\n        const [focusBlock] = isPortableTextSpan(focusChild)\n          ? Editor.node(editor, editor.selection.focus, {depth: 1})\n          : []\n        const hasAnnotationFocus =\n          focusChild &&\n          isPortableTextTextBlock(focusBlock) &&\n          isPortableTextSpan(focusChild) &&\n          (focusChild.marks || ([] as string[])).filter((m) =>\n            (focusBlock.markDefs || []).map((def) => def._key).includes(m),\n          ).length > 0\n        const [start] = Range.edges(editor.selection)\n        const atStartOfNode = Editor.isStart(editor, start, start.path)\n\n        if (\n          focusChild &&\n          isPortableTextSpan(focusChild) &&\n          (!hasAnnotationFocus || atStartOfNode) &&\n          editor.pteIncrementBlockLevels(isShiftTab)\n        ) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n        const focusBlock = Node.descendant(editor, focusBlockPath) as SlateTextBlock | VoidElement\n\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n\n        // Enter from another style than the first (default one)\n        if (\n          editor.isTextBlock(focusBlock) &&\n          focusBlock.style &&\n          focusBlock.style !== types.styles[0].value\n        ) {\n          const [, end] = Range.edges(editor.selection)\n          const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n          if (endAtEndOfNode) {\n            Editor.insertNode(editor, createEmptyBlock())\n            event.preventDefault()\n            editor.onChange()\n            return\n          }\n        }\n        // Block object enter key\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Editor.insertNode(editor, createEmptyBlock())\n          event.preventDefault()\n          editor.onChange()\n          return\n        }\n        // Default enter key behavior\n        event.preventDefault()\n        editor.insertBreak()\n        editor.onChange()\n      }\n\n      // Soft line breaks\n      if (isShiftEnter) {\n        event.preventDefault()\n        editor.insertText('\\n')\n        return\n      }\n\n      // Undo/redo\n      if (isHotkey('mod+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.undo()\n        return\n      }\n      if (isHotkey('mod+y', event.nativeEvent) || isHotkey('mod+shift+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.redo()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n  isPortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport {set, unset, insert} from '../patch/PatchEvent'\nimport type {InvalidValueResolution, PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)]\n  const validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description: 'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description: 'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description: 'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description: 'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description: 'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action: 'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (!blk._type && isPortableTextTextBlock({...blk, _type: types.block.name})) {\n          resolution = {\n            patches: [set({...blk, _type: types.block.name}, [{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description: 'inputs.portable-text.invalid-value.missing-block-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description: 'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description: 'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n      // Test that every child in text block is valid\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has (valid) children property\n        if (!textBlock.children || !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [unset([{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a missing or invalid required property 'children'.`,\n            action: 'Remove the block',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action: 'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that markDefs exists and is valid\n        if (!blk.markDefs || !Array.isArray(blk.markDefs)) {\n          resolution = {\n            patches: [set({...textBlock, markDefs: []}, [{_key: textBlock._key}])],\n            description: `Block has a missing or invalid required property 'markDefs'.`,\n            action: 'Add empty markDefs array',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-markdefs.description',\n              action: 'inputs.portable-text.invalid-value.missing-or-invalid-markdefs.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // NOTE: this is commented out as we want to allow the saved data to have optional .marks for spans (as specified by the schema)\n        // const spansWithUndefinedMarks = blk.children\n        //   .filter(cld => cld._type === types.span.name)\n        //   .filter(cld => typeof cld.marks === 'undefined')\n\n        // if (spansWithUndefinedMarks.length > 0) {\n        //   const first = spansWithUndefinedMarks[0]\n        //   resolution = {\n        //     patches: [\n        //       set({...first, marks: []}, [{_key: blk._key}, 'children', {_key: first._key}])\n        //     ],\n        //     description: `Span has no .marks array`,\n        //     action: 'Add empty marks array',\n        //     item: first\n        //   }\n        //   return true\n        // }\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n        // Note: this is commented out as it may be a bit too strict:\n        // // Test that all markDefs are in use\n        // if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        //   const unusedMarkDefs: string[] = uniq(\n        //     blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key))\n        //   )\n        //   if (unusedMarkDefs.length > 0) {\n        //     resolution = {\n        //       patches: unusedMarkDefs.map((key) =>\n        //         unset([{_key: blk._key}, 'markDefs', {_key: key}])\n        //       ),\n        //       description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n        //         ', '\n        //       )}.`,\n        //       action: 'Remove unused mark definition item',\n        //       item: blk,\n        //     }\n        //     return true\n        //   }\n        // }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter((mark) =>\n          textBlock.markDefs ? !textBlock.markDefs.find((def) => def._key === mark) : false,\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description: 'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action: 'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {key: blk._key, orphanedMarks},\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that children is lengthy\n        if (textBlock.children && textBlock.children.length === 0) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n          }\n          resolution = {\n            patches: [insert([newSpan], 'after', [{_key: blk._key}, 'children', 0])],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description: 'inputs.portable-text.invalid-value.empty-children.description',\n              action: 'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description: 'inputs.portable-text.invalid-value.non-object-child.description',\n                  action: 'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                patches: [set(newChild, [{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description: 'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action: 'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', {_key: child._key}])],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description: 'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action: 'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', {_key: child._key}])],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action: 'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {key: blk._key, childKey: child._key, childType: child._type},\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (child._type === types.span.name && typeof child.text !== 'string') {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description: 'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action: 'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import {Node, Transforms, Editor, Descendant, Range} from 'slate'\nimport {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport {ReactEditor} from 'slate-react'\nimport {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  EditorChanges,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../../utils/values'\nimport {validateValue} from '../../utils/validateValue'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  change$: EditorChanges,\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n) {\n  return function withInsertData(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach((zw) => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      })\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData('application/x-portable-text-event-origin', originEvent || 'external')\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            keyGenerator,\n            spanTypeName,\n          )\n          // Validate the result\n          const validation = validateValue(parsed, schemaTypes, keyGenerator)\n          // Bail out if it's not valid\n          if (!validation.valid) {\n            const errorDescription = `${validation.resolution?.description}`\n            change$.next({\n              type: 'error',\n              level: 'warning',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      change$.next({type: 'loading', isLoading: true}) // This could potentially take some time\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(portableText, schemaTypes, keyGenerator)\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          change$.next({\n            type: 'error',\n            level: 'warning',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`)\n        _insertFragment(editor, fragment, schemaTypes)\n        change$.next({type: 'loading', isLoading: false})\n        return true\n      }\n      change$.next({type: 'loading', isLoading: false})\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? // eslint-disable-next-line max-nested-callbacks\n                      [...child.marks].filter((mark) => mark !== oldKey).concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  if (!editor.selection) {\n    return\n  }\n\n  // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n  const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {depth: 1})\n  if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n    const {markDefs} = focusBlock\n    debug('Mixing markDefs of focusBlock and fragments[0] block', markDefs, fragment[0].markDefs)\n    if (!isEqual(markDefs, fragment[0].markDefs)) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: uniq([...(fragment[0].markDefs || []), ...(markDefs || [])]),\n        },\n        {at: focusPath, mode: 'lowest', voids: false},\n      )\n    }\n  }\n\n  const isPasteToEmptyEditor = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n  if (isPasteToEmptyEditor) {\n    // Special case for pasting directly into an empty editor (a placeholder block).\n    // When pasting content starting with multiple empty blocks,\n    // `editor.insertFragment` can potentially duplicate the keys of\n    // the placeholder block because of operations that happen\n    // inside `editor.insertFragment` (involves an `insert_node` operation).\n    // However by splitting the placeholder block first in this situation we are good.\n    Transforms.splitNodes(editor, {at: [0, 0]})\n    editor.insertFragment(fragment)\n    Transforms.removeNodes(editor, {at: [0]})\n  } else {\n    // All other inserts\n    editor.insertFragment(fragment)\n  }\n  editor.onChange()\n}\n","import {BaseOperation, Editor, NodeEntry, Node} from 'slate'\nimport {noop} from 'lodash'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {createEditorOptions} from '../../types/options'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport {createWithEditableAPI} from './createWithEditableAPI'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport {createWithEditableAPI} from './createWithEditableAPI'\nexport {createWithHotkeys} from './createWithHotKeys'\nexport {createWithInsertData} from './createWithInsertData'\nexport {createWithMaxBlocks} from './createWithMaxBlocks'\nexport {createWithObjectKeys} from './createWithObjectKeys'\nexport {createWithPatches} from './createWithPatches'\nexport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nexport {createWithPortableTextLists} from './createWithPortableTextLists'\nexport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nexport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nexport {createWithSchemaTypes} from './createWithSchemaTypes'\nexport {createWithUndoRedo} from './createWithUndoRedo'\nexport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\nconst originalFnMap = new WeakMap<PortableTextSlateEditor, OriginalEditorFunctions>()\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: createEditorOptions,\n): {editor: PortableTextSlateEditor; subscribe: () => () => void} => {\n  const e = editor as T & PortableTextSlateEditor\n  const {keyGenerator, portableTextEditor, patches$, readOnly, maxBlocks} = options\n  const {schemaTypes, change$} = portableTextEditor\n  e.subscriptions = []\n  if (e.destroy) {\n    e.destroy()\n  } else {\n    // Save a copy of the original editor functions here before they were changed by plugins.\n    // We will put them back when .destroy is called (see below).\n    originalFnMap.set(e, {\n      apply: e.apply,\n      onChange: e.onChange,\n      normalizeNode: e.normalizeNode,\n    })\n  }\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(schemaTypes, keyGenerator)\n  const withSchemaTypes = createWithSchemaTypes({schemaTypes, keyGenerator})\n  const withEditableAPI = createWithEditableAPI(portableTextEditor, schemaTypes, keyGenerator)\n  const withPatches = createWithPatches({\n    change$,\n    keyGenerator,\n    patches$,\n    patchFunctions: operationToPatches,\n    readOnly,\n    schemaTypes,\n  })\n  const withMaxBlocks = createWithMaxBlocks(maxBlocks || -1)\n  const withPortableTextLists = createWithPortableTextLists(schemaTypes)\n  const withUndoRedo = createWithUndoRedo({\n    readOnly,\n    patches$,\n    blockSchemaType: schemaTypes.block,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(schemaTypes, change$)\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(schemaTypes)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock({\n    keyGenerator,\n    schemaTypes,\n  })\n\n  const withUtils = createWithUtils({keyGenerator, schemaTypes})\n  const withPortableTextSelections = createWithPortableTextSelections(change$, schemaTypes)\n\n  e.destroy = () => {\n    const originalFunctions = originalFnMap.get(e)\n    if (!originalFunctions) {\n      throw new Error('Could not find pristine versions of editor functions')\n    }\n    e.apply = originalFunctions.apply\n    e.history = {undos: [], redos: []}\n    e.normalizeNode = originalFunctions.normalizeNode\n    e.onChange = originalFunctions.onChange\n  }\n  if (readOnly) {\n    return {\n      editor: withSchemaTypes(\n        withObjectKeys(\n          withPortableTextMarkModel(\n            withPortableTextBlockStyle(\n              withUtils(\n                withPlaceholderBlock(\n                  withPortableTextLists(withPortableTextSelections(withEditableAPI(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n      subscribe: () => noop,\n    }\n  }\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return {\n    editor: withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPortableTextLists(\n              withPlaceholderBlock(\n                withUtils(\n                  withMaxBlocks(\n                    withUndoRedo(withPatches(withPortableTextSelections(withEditableAPI(e)))),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n    subscribe: () => {\n      const unsubscribes: (() => void)[] = []\n      editor.subscriptions.forEach((subscribeFn) => {\n        unsubscribes.push(subscribeFn())\n      })\n      return () => {\n        unsubscribes.forEach((unsubscribeFn) => {\n          unsubscribeFn()\n        })\n      }\n    },\n  }\n}\n","import React, {PropsWithChildren, useEffect, useMemo} from 'react'\nimport {Slate, withReact} from 'slate-react'\nimport {createEditor} from 'slate'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {debugWithName} from '../../utils/debug'\nimport {PatchObservable} from '../../types/editor'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {withPlugins} from '../plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\n/**\n * @internal\n */\nexport interface SlateContainerProps extends PropsWithChildren {\n  keyGenerator: () => string\n  maxBlocks: number | undefined\n  patches$?: PatchObservable\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\n/**\n * Sets up and encapsulates the Slate instance\n * @internal\n */\nexport function SlateContainer(props: SlateContainerProps) {\n  const {patches$, portableTextEditor, readOnly, maxBlocks, keyGenerator} = props\n\n  // Create the slate instance\n  const [slateEditor, subscribe] = useMemo(() => {\n    debug('Creating new Slate editor instance')\n    const {editor, subscribe: _sub} = withPlugins(withReact(createEditor()), {\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n    KEY_TO_VALUE_ELEMENT.set(editor, {})\n    KEY_TO_SLATE_ELEMENT.set(editor, {})\n    return [editor, _sub]\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) // Only initial - empty deps here\n\n  useEffect(() => {\n    const unsubscribe = subscribe()\n    return () => {\n      unsubscribe()\n    }\n  }, [subscribe])\n\n  // Update the slate instance when plugin dependent props change.\n  useEffect(() => {\n    debug('Re-initializing plugin chain')\n    withPlugins(slateEditor, {\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n  }, [keyGenerator, portableTextEditor, maxBlocks, readOnly, patches$, slateEditor])\n\n  const initialValue = useMemo(() => {\n    return [slateEditor.createPlaceholderBlock()]\n  }, [slateEditor])\n\n  useEffect(() => {\n    return () => {\n      debug('Destroying Slate editor')\n      slateEditor.destroy()\n    }\n  }, [slateEditor])\n\n  return (\n    <Slate editor={slateEditor} initialValue={initialValue}>\n      {props.children}\n    </Slate>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport {EditorSelection} from '../../types/editor'\n\n/**\n * A React context for sharing the editor selection.\n */\nexport const PortableTextEditorSelectionContext = createContext<EditorSelection | null>(null)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\n","import {createContext, useContext} from 'react'\n\nimport {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext = createContext<PortableTextEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import {PortableTextBlock} from '@sanity/types'\nimport {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor value.\n */\nexport const PortableTextEditorValueContext = createContext<PortableTextBlock[] | undefined>(\n  undefined,\n)\n\n/**\n * Get the current editor value from the React context.\n */\nexport const usePortableTextEditorValue = () => {\n  return useContext(PortableTextEditorValueContext)\n}\n","import {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor's readOnly status.\n */\nexport const PortableTextEditorReadOnlyContext = createContext<boolean>(false)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorReadOnlyStatus = (): boolean => {\n  const readOnly = useContext(PortableTextEditorReadOnlyContext)\n\n  if (readOnly === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorReadOnly\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return readOnly\n}\n","/* eslint-disable max-nested-callbacks */\nimport {useCallback, useMemo, useRef} from 'react'\nimport {PortableTextBlock} from '@sanity/types'\nimport {debounce, isEqual} from 'lodash'\nimport {Editor, Transforms, Node, Descendant, Text} from 'slate'\nimport {useSlate} from 'slate-react'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {EditorChange, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {VOID_CHILD_KEY, toSlateValue} from '../../utils/values'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport {validateValue} from '../../utils/validateValue'\nimport {isChangingLocally, isChangingRemotely, withRemoteChanges} from '../../utils/withChanges'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  keyGenerator: () => string\n  onChange: (change: EditorChange) => void\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\nconst CURRENT_VALUE = new WeakMap<PortableTextEditor, PortableTextBlock[] | undefined>()\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps,\n): (value: PortableTextBlock[] | undefined, userCallbackFn?: () => void) => void {\n  const {portableTextEditor, readOnly, keyGenerator} = props\n  const {change$, schemaTypes} = portableTextEditor\n  const previousValue = useRef<PortableTextBlock[] | undefined>()\n  const slateEditor = useSlate()\n  const updateValueFunctionRef = useRef<(value: PortableTextBlock[] | undefined) => void>()\n\n  const updateFromCurrentValue = useCallback(() => {\n    const currentValue = CURRENT_VALUE.get(portableTextEditor)\n    if (previousValue.current === currentValue) {\n      debug('Value is the same object as previous, not need to sync')\n      return\n    }\n    if (updateValueFunctionRef.current && currentValue) {\n      debug('Updating the value debounced')\n      updateValueFunctionRef.current(currentValue)\n    }\n  }, [portableTextEditor])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updateValueDebounced = useCallback(\n    debounce(updateFromCurrentValue, 1000, {trailing: true, leading: false}),\n    [updateFromCurrentValue],\n  )\n\n  return useMemo(() => {\n    const updateFunction = (value: PortableTextBlock[] | undefined) => {\n      CURRENT_VALUE.set(portableTextEditor, value)\n      const isProcessingLocalChanges = isChangingLocally(slateEditor)\n      const isProcessingRemoteChanges = isChangingRemotely(slateEditor)\n      if (!readOnly) {\n        if (isProcessingLocalChanges) {\n          debug('Has local changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n        if (isProcessingRemoteChanges) {\n          debug('Has remote changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n      }\n\n      let isChanged = false\n      let isValid = true\n\n      const hadSelection = !!slateEditor.selection\n\n      // If empty value, remove everything in the editor and insert a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        Editor.withoutNormalizing(slateEditor, () => {\n          withoutSaving(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (hadSelection) {\n                Transforms.deselect(slateEditor)\n              }\n              const childrenLength = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [childrenLength - 1 - index],\n                })\n              })\n              Transforms.insertNodes(slateEditor, slateEditor.createPlaceholderBlock(), {at: [0]})\n              // Add a new selection in the top of the document\n              if (hadSelection) {\n                Transforms.select(slateEditor, [0, 0])\n              }\n            })\n          })\n        })\n        isChanged = true\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(value, {\n          schemaTypes,\n        })\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutSaving(slateEditor, () => {\n              withoutPatching(slateEditor, () => {\n                const childrenLength = slateEditor.children.length\n                // Remove blocks that have become superfluous\n                if (slateValueFromProps.length < childrenLength) {\n                  for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n                    Transforms.removeNodes(slateEditor, {\n                      at: [i],\n                    })\n                  }\n                  isChanged = true\n                }\n                // Go through all of the blocks and see if they need to be updated\n                slateValueFromProps.forEach((currentBlock, currentBlockIndex) => {\n                  const oldBlock = slateEditor.children[currentBlockIndex]\n                  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n                  if (hasChanges && isValid) {\n                    const validationValue = [value[currentBlockIndex]]\n                    const validation = validateValue(validationValue, schemaTypes, keyGenerator)\n                    if (validation.valid) {\n                      if (oldBlock._key === currentBlock._key) {\n                        if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n                        _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)\n                      } else {\n                        if (debug.enabled) debug('Replacing block', oldBlock, currentBlock)\n                        _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n                      }\n                      isChanged = true\n                    } else {\n                      change$.next({\n                        type: 'invalidValue',\n                        resolution: validation.resolution,\n                        value,\n                      })\n                      isValid = false\n                    }\n                  }\n                  if (!oldBlock && isValid) {\n                    const validationValue = [value[currentBlockIndex]]\n                    const validation = validateValue(validationValue, schemaTypes, keyGenerator)\n                    if (debug.enabled)\n                      debug(\n                        'Validating and inserting new block in the end of the value',\n                        currentBlock,\n                      )\n                    if (validation.valid) {\n                      withPreserveKeys(slateEditor, () => {\n                        Transforms.insertNodes(slateEditor, currentBlock, {\n                          at: [currentBlockIndex],\n                        })\n                      })\n                    } else {\n                      debug('Invalid', validation)\n                      change$.next({\n                        type: 'invalidValue',\n                        resolution: validation.resolution,\n                        value,\n                      })\n                      isValid = false\n                    }\n                  }\n                })\n              })\n            })\n          })\n        })\n      }\n\n      if (!isValid) {\n        debug('Invalid value, returning')\n        return\n      }\n      if (isChanged) {\n        debug('Server value changed, syncing editor')\n        try {\n          slateEditor.onChange()\n        } catch (err) {\n          console.error(err)\n          change$.next({\n            type: 'invalidValue',\n            resolution: null,\n            value,\n          })\n          return\n        }\n        if (hadSelection && !slateEditor.selection) {\n          Transforms.select(slateEditor, {\n            anchor: {path: [0, 0], offset: 0},\n            focus: {path: [0, 0], offset: 0},\n          })\n          slateEditor.onChange()\n        }\n        change$.next({type: 'value', value})\n      } else {\n        debug('Server value and editor value is equal, no need to sync.')\n      }\n      previousValue.current = value\n    }\n    updateValueFunctionRef.current = updateFunction\n    return updateFunction\n  }, [\n    change$,\n    keyGenerator,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n    updateValueDebounced,\n  ])\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  withPreserveKeys(slateEditor, () => {\n    Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  })\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach(\n        (_, index) => {\n          const childIndex = oldBlockChildrenLength - 1 - index\n          if (childIndex > 0) {\n            debug('Removing child')\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, childIndex],\n            })\n          }\n        },\n      )\n    }\n    currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n      const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n      const isTextChanged = !isEqual(currentBlockChild.text, oldBlockChild?.text)\n      const path = [currentBlockIndex, currentBlockChildIndex]\n      if (isChildChanged) {\n        // Update if this is the same child\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug('Updating changed child', currentBlockChild, oldBlockChild)\n          Transforms.setNodes(slateEditor, currentBlockChild as Partial<Node>, {\n            at: path,\n          })\n          const isSpanNode =\n            Text.isText(currentBlockChild) &&\n            currentBlockChild._type === 'span' &&\n            Text.isText(oldBlockChild) &&\n            oldBlockChild._type === 'span'\n          if (isSpanNode && isTextChanged) {\n            Transforms.delete(slateEditor, {\n              at: {focus: {path, offset: 0}, anchor: {path, offset: oldBlockChild.text.length}},\n            })\n            Transforms.insertText(slateEditor, currentBlockChild.text, {\n              at: path,\n            })\n            slateEditor.onChange()\n          } else if (!isSpanNode) {\n            // If it's a inline block, also update the void text node key\n            debug('Updating changed inline object child', currentBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              {_key: VOID_CHILD_KEY},\n              {\n                at: [...path, 0],\n                voids: true,\n              },\n            )\n          }\n          // Replace the child if _key's are different\n        } else if (oldBlockChild) {\n          debug('Replacing child', currentBlockChild)\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, currentBlockChildIndex],\n          })\n          withPreserveKeys(slateEditor, () => {\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n          })\n          slateEditor.onChange()\n          // Insert it if it didn't exist before\n        } else if (!oldBlockChild) {\n          debug('Inserting new child', currentBlockChild)\n          withPreserveKeys(slateEditor, () => {\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          })\n        }\n      }\n    })\n  }\n}\n","import React, {\n  PropsWithChildren,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {PortableTextBlock} from '@sanity/types'\nimport {throttle} from 'lodash'\nimport {useSlate} from 'slate-react'\nimport {Editor} from 'slate'\nimport {EditorChange, EditorChanges, EditorSelection} from '../../types/editor'\nimport {Patch} from '../../types/patch'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {PortableTextEditorSelectionContext} from '../hooks/usePortableTextEditorSelection'\nimport {PortableTextEditorContext} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditorValueContext} from '../hooks/usePortableTextEditorValue'\nimport {PortableTextEditorReadOnlyContext} from '../hooks/usePortableTextReadOnly'\nimport {useSyncValue} from '../hooks/useSyncValue'\nimport {PortableTextEditorKeyGeneratorContext} from '../hooks/usePortableTextEditorKeyGenerator'\nimport {IS_PROCESSING_LOCAL_CHANGES} from '../../utils/weakMaps'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\nconst debugVerbose = debug.enabled && false\n\n// The editor will commit changes in a throttled fashion in order\n// not to overload the network and degrade performance while typing.\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * @internal\n */\nexport interface SynchronizerProps extends PropsWithChildren {\n  change$: EditorChanges\n  portableTextEditor: PortableTextEditor\n  keyGenerator: () => string\n  onChange: (change: EditorChange) => void\n  readOnly: boolean\n  value: PortableTextBlock[] | undefined\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {change$, portableTextEditor, onChange, keyGenerator, readOnly, value} = props\n  const [selection, setSelection] = useState<EditorSelection>(null)\n  const pendingPatches = useRef<Patch[]>([])\n\n  const syncValue = useSyncValue({\n    keyGenerator,\n    onChange,\n    portableTextEditor,\n    readOnly,\n  })\n\n  const slateEditor = useSlate()\n\n  useEffect(() => {\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [slateEditor])\n\n  const onFlushPendingPatches = useCallback(() => {\n    if (pendingPatches.current.length > 0) {\n      debug('Flushing pending patches')\n      if (debugVerbose) {\n        debug(`Patches:\\n${JSON.stringify(pendingPatches.current, null, 2)}`)\n      }\n      const snapshot = PortableTextEditor.getValue(portableTextEditor)\n      change$.next({type: 'mutation', patches: pendingPatches.current, snapshot})\n      pendingPatches.current = []\n    }\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [slateEditor, portableTextEditor, change$])\n\n  const onFlushPendingPatchesThrottled = useMemo(() => {\n    return throttle(\n      () => {\n        // If the editor is normalizing (each operation) it means that it's not in the middle of a bigger transform,\n        // and we can flush these changes immediately.\n        if (Editor.isNormalizing(slateEditor)) {\n          onFlushPendingPatches()\n          return\n        }\n        // If it's in the middle of something, try again.\n        onFlushPendingPatchesThrottled()\n      },\n      FLUSH_PATCHES_THROTTLED_MS,\n      {\n        leading: false,\n        trailing: true,\n      },\n    )\n  }, [onFlushPendingPatches, slateEditor])\n\n  // Flush pending patches immediately on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to editor changes$')\n    const sub = change$.subscribe((next: EditorChange): void => {\n      switch (next.type) {\n        case 'patch':\n          IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, true)\n          pendingPatches.current.push(next.patch)\n          onFlushPendingPatchesThrottled()\n          onChange(next)\n          break\n        case 'selection':\n          // Set the selection state in a transition, we don't need the state immediately.\n          startTransition(() => {\n            if (debugVerbose) debug('Setting selection')\n            setSelection(next.selection)\n          })\n          onChange(next) // Keep this out of the startTransition!\n          break\n        default:\n          onChange(next)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes$')\n      sub.unsubscribe()\n    }\n  }, [change$, onChange, onFlushPendingPatchesThrottled, slateEditor])\n\n  // Sync the value when going online\n  const handleOnline = useCallback(() => {\n    debug('Editor is online, syncing from props.value')\n    change$.next({type: 'connection', value: 'online'})\n    syncValue(value)\n  }, [change$, syncValue, value])\n\n  const handleOffline = useCallback(() => {\n    debug('Editor is offline')\n    change$.next({type: 'connection', value: 'offline'})\n  }, [change$])\n\n  // Notify about window online and offline status changes\n  useEffect(() => {\n    if (portableTextEditor.props.patches$) {\n      window.addEventListener('online', handleOnline)\n      window.addEventListener('offline', handleOffline)\n    }\n    return () => {\n      if (portableTextEditor.props.patches$) {\n        window.removeEventListener('online', handleOnline)\n        window.removeEventListener('offline', handleOffline)\n      }\n    }\n  })\n\n  // This hook must be set up after setting up the subscription above, or it will not pick up validation errors from the useSyncValue hook.\n  // This will cause the editor to not be able to signal a validation error and offer invalid value resolution of the initial value.\n  const isInitialValueFromProps = useRef(true)\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncValue(value)\n    // Signal that we have our first value, and are ready to roll.\n    if (isInitialValueFromProps.current) {\n      change$.next({type: 'loading', isLoading: false})\n      change$.next({type: 'ready'})\n      isInitialValueFromProps.current = false\n    }\n  }, [change$, syncValue, value])\n\n  return (\n    <PortableTextEditorKeyGeneratorContext.Provider value={keyGenerator}>\n      <PortableTextEditorContext.Provider value={portableTextEditor}>\n        <PortableTextEditorValueContext.Provider value={value}>\n          <PortableTextEditorReadOnlyContext.Provider value={readOnly}>\n            <PortableTextEditorSelectionContext.Provider value={selection}>\n              {props.children}\n            </PortableTextEditorSelectionContext.Provider>\n          </PortableTextEditorReadOnlyContext.Provider>\n        </PortableTextEditorValueContext.Provider>\n      </PortableTextEditorContext.Provider>\n    </PortableTextEditorKeyGeneratorContext.Provider>\n  )\n}\n","import React, {PropsWithChildren} from 'react'\nimport {\n  ArrayDefinition,\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {Subject} from 'rxjs'\nimport {compileType} from '../utils/schema'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {defaultKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\nimport {SlateContainer} from './components/SlateContainer'\nimport {Synchronizer} from './components/Synchronizer'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps = PropsWithChildren<{\n  /**\n   * Function that gets called when the editor changes the value\n   */\n  onChange: (change: EditorChange) => void\n\n  /**\n   * Schema type for the portable text field\n   */\n  schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n  /**\n   * Maximum number of blocks to allow within the editor\n   */\n  maxBlocks?: number | string\n\n  /**\n   * Whether or not the editor should be in read-only mode\n   */\n  readOnly?: boolean\n\n  /**\n   * The current value of the portable text field\n   */\n  value?: PortableTextBlock[]\n\n  /**\n   * Function used to generate keys for array items (`_key`)\n   */\n  keyGenerator?: () => string\n\n  /**\n   * Observable of local and remote patches for the edited value.\n   */\n  patches$?: PatchObservable\n\n  /**\n   * Backward compatibility (renamed to patches$).\n   */\n  incomingPatches$?: PatchObservable\n}>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends React.Component<PortableTextEditorProps> {\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor API (currently implemented with Slate).\n   */\n  private editable?: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (!props.schemaType) {\n      throw new Error('PortableTextEditor: missing \"type\" property')\n    }\n\n    if (props.incomingPatches$) {\n      console.warn(`The prop 'incomingPatches$' is deprecated and renamed to 'patches$'`)\n    }\n\n    this.change$.next({type: 'loading', isLoading: true})\n\n    this.schemaTypes = getPortableTextMemberSchemaTypes(\n      props.schemaType.hasOwnProperty('jsonType')\n        ? props.schemaType\n        : compileType(props.schemaType),\n    )\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (this.props.schemaType !== prevProps.schemaType) {\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editable = {...this.editable, ...editable}\n  }\n\n  render() {\n    const {onChange, value, children, patches$, incomingPatches$} = this.props\n    const {change$} = this\n    const _patches$ = incomingPatches$ || patches$ // Backward compatibility\n\n    const maxBlocks =\n      typeof this.props.maxBlocks === 'undefined'\n        ? undefined\n        : parseInt(this.props.maxBlocks.toString(), 10) || undefined\n\n    const readOnly = Boolean(this.props.readOnly)\n    const keyGenerator = this.props.keyGenerator || defaultKeyGenerator\n    return (\n      <SlateContainer\n        keyGenerator={keyGenerator}\n        maxBlocks={maxBlocks}\n        patches$={_patches$}\n        portableTextEditor={this}\n        readOnly={readOnly}\n      >\n        <Synchronizer\n          change$={change$}\n          keyGenerator={keyGenerator}\n          onChange={onChange}\n          portableTextEditor={this}\n          readOnly={readOnly}\n          value={value}\n        >\n          {children}\n        </Synchronizer>\n      </SlateContainer>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (editor: PortableTextEditor): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static addAnnotation = (\n    editor: PortableTextEditor,\n    type: ObjectSchemaType,\n    value?: {[prop: string]: unknown},\n  ): {spanPath: Path; markDefPath: Path} | undefined => editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (editor: PortableTextEditor): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = (\n    editor: PortableTextEditor,\n    type: SpanSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = (\n    editor: PortableTextEditor,\n    type: BlockSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (editor: PortableTextEditor, selection: EditorSelection | null) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = (editor: PortableTextEditor, type: ObjectSchemaType) =>\n    editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n}\n","import {isEqual} from 'lodash'\nimport type {Patch} from '../types/patch'\n\n/**\n * Try to compact a set of patches\n *\n */\nexport function compactPatches(patches: Patch[]) {\n  // If the last patch is unsetting everything, just do that\n  const lastPatch = patches.slice(-1)[0]\n  if (lastPatch && lastPatch.type === 'unset' && lastPatch.path.length === 0) {\n    return [lastPatch]\n  }\n  let finalPatches = patches\n  // Run through the patches and remove any redundant ones.\n  finalPatches = finalPatches.filter((patch, index) => {\n    if (!patch) {\n      return false\n    }\n    const nextPatch = finalPatches[index + 1]\n    if (\n      nextPatch &&\n      nextPatch.type === 'set' &&\n      patch.type === 'set' &&\n      isEqual(patch.path, nextPatch.path)\n    ) {\n      return false\n    }\n    return true\n  })\n  if (finalPatches.length !== patches.length) {\n    return finalPatches\n  }\n  return patches\n}\n","import {isEqual} from 'lodash'\nimport {Path, PortableTextBlock} from '@sanity/types'\nimport {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' && '_key' in point.path[0] && point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' && '_key' in point.path[2] && point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find((blk) => blk._key === blockKey)\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (!block.children || (Array.isArray(block.children) && block.children.length === 0)) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (anchor && value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus}\n  }\n  return null\n}\n","import {PortableTextObject} from '@sanity/types'\nimport React, {useCallback} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: React.ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  // eslint-disable-next-line no-alert\n  const handleClick = useCallback(() => alert(JSON.stringify(props.annotation)), [props.annotation])\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n","import React, {\n  ReactElement,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {Text} from 'slate'\nimport {RenderLeafProps, useSelected} from 'slate-react'\nimport {isEqual, uniq} from 'lodash'\nimport {Path, PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {\n  RenderChildFunction,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderDecoratorFunction,\n  BlockDecoratorRenderProps,\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  children: ReactElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {attributes, children, leaf, schemaTypes, renderChild, renderDecorator, renderAnnotation} =\n    props\n  const spanRef = React.useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () => uniq((leaf.marks || EMPTY_MARKS).filter((mark) => decoratorValues.includes(mark))),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) && block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n    const sub = portableTextEditor.change$.subscribe((next) => {\n      if (next.type === 'blur') {\n        setFocused(false)\n        setSelected(false)\n        return\n      }\n      if (next.type === 'focus') {\n        const sel = PortableTextEditor.getSelection(portableTextEditor)\n        if (\n          sel &&\n          isEqual(sel.focus.path, path) &&\n          PortableTextEditor.isCollapsedSelection(portableTextEditor)\n        ) {\n          setFocused(true)\n        }\n        setSelectedFromRange()\n        return\n      }\n      if (next.type === 'selection') {\n        if (\n          next.selection &&\n          isEqual(next.selection.focus.path, path) &&\n          PortableTextEditor.isCollapsedSelection(portableTextEditor)\n        ) {\n          setFocused(true)\n        } else {\n          setFocused(false)\n        }\n        setSelectedFromRange()\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find((dec) => dec.value === mark)\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> = Object.defineProperty(\n            {\n              children: returnedChildren,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType,\n              value: mark,\n            },\n            'type',\n            {\n              enumerable: false,\n              get() {\n                console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                return schemaType\n              },\n            },\n          )\n          returnedChildren = renderDecorator(_props as BlockDecoratorRenderProps)\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find((t) => t.name === annotation._type)\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> = Object.defineProperty(\n                {\n                  block,\n                  children: returnedChildren,\n                  editorElementRef: spanRef,\n                  focused,\n                  path,\n                  selected,\n                  schemaType,\n                  value: annotation,\n                },\n                'type',\n                {\n                  enumerable: false,\n                  get() {\n                    console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                    return schemaType\n                  },\n                },\n              )\n\n              returnedChildren = (\n                <span ref={spanRef}>{renderAnnotation(_props as BlockAnnotationRenderProps)}</span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> = Object.defineProperty(\n            {\n              annotations,\n              children: defaultRendered,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              schemaType: schemaTypes.span,\n              selected,\n              value: child,\n            },\n            'type',\n            {\n              enumerable: false,\n              get() {\n                console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                return schemaTypes.span\n              },\n            },\n          )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n","import {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport React from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nexport default DefaultObject\n","import styled from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import React, {useState, useRef, useMemo, useCallback, DragEvent, useEffect} from 'react'\nimport {Element as SlateElement, Transforms, Path, Editor} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING_ELEMENT_TARGET,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: React.ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: React.MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({children, element, readOnly, blockRef}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: React.MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n  const isInline = useMemo(() => Editor.isInline(editor, element), [editor, element])\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () => setBlockElement(blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element)),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (dragPosition === 'top' && isBefore && targetPath[0] !== editor.children.length - 1) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector('[data-pt-drag-ghost-element]')\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n","/* eslint-disable complexity */\n/* eslint-disable max-statements */\nimport React, {ReactElement, FunctionComponent, useRef, useMemo} from 'react'\nimport {Element as SlateElement, Editor, Range} from 'slate'\nimport {Path, PortableTextChild, PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {useSelected, useSlateStatic, ReactEditor, RenderElementProps} from 'slate-react'\nimport {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {fromSlateValue} from '../../utils/values'\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {DefaultBlockObject, DefaultListItem, DefaultListItemInner} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n\n  const value = useMemo(\n    () => fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type)\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [{_key: block._key}, 'children', {_key: element._key}]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style)\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item) => item.value === element.listItem)\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div key={element._key} {...attributes} className={className} spellCheck={spellCheck}>\n        <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find((_type) => _type.name === element._type)\n  if (!schemaType) {\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`)\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n","import React, {useRef, useLayoutEffect, useEffect} from 'react'\n\nconst useIsomorphicEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect\n\nexport function useForwardedRef<T>(ref: React.ForwardedRef<T>): React.MutableRefObject<T | null> {\n  const innerRef = useRef<T | null>(null)\n\n  useIsomorphicEffect(() => {\n    if (!ref) return\n\n    if (typeof ref === 'function') {\n      ref(innerRef.current)\n    } else {\n      ref.current = innerRef.current\n    }\n  })\n\n  return innerRef\n}\n","import {BaseRange, Transforms, Text, select, Editor} from 'slate'\nimport React, {useCallback, useMemo, useEffect, forwardRef, useState, KeyboardEvent} from 'react'\nimport {\n  Editable as SlateEditable,\n  ReactEditor,\n  RenderElementProps,\n  RenderLeafProps,\n  useSlate,\n} from 'slate-react'\nimport {noop} from 'lodash'\nimport {PortableTextBlock} from '@sanity/types'\nimport {\n  EditorChange,\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  OnPasteResult,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport {HotkeyOptions} from '../types/options'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../utils/values'\nimport {normalizeSelection} from '../utils/selection'\nimport {toPortableTextRange, toSlateRange} from '../utils/ranges'\nimport {debugWithName} from '../utils/debug'\nimport {usePortableTextEditorReadOnlyStatus} from './hooks/usePortableTextReadOnly'\nimport {usePortableTextEditorKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\nimport {Leaf} from './components/Leaf'\nimport {Element} from './components/Element'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {createWithInsertData, createWithHotkeys} from './plugins'\nimport {useForwardedRef} from './hooks/useForwardedRef'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: React.CSSProperties = {\n  opacity: 0.5,\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nconst EMPTY_DECORATORS: BaseRange[] = []\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  React.TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: () => React.ReactNode\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef(function PortableTextEditable(\n  props: PortableTextEditableProps &\n    Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'onPaste' | 'onBeforeInput'>,\n  forwardedRef: React.ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const keyGenerator = usePortableTextEditorKeyGenerator()\n  const ref = useForwardedRef(forwardedRef)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(null)\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  const {change$, schemaTypes} = portableTextEditor\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // React/UI-specific plugins\n  const withInsertData = useMemo(\n    () => createWithInsertData(change$, schemaTypes, keyGenerator),\n    [change$, keyGenerator, schemaTypes],\n  )\n  const withHotKeys = useMemo(\n    () => createWithHotkeys(schemaTypes, keyGenerator, portableTextEditor, hotkeys),\n    [hotkeys, keyGenerator, portableTextEditor, schemaTypes],\n  )\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [readOnly, slateEditor, withHotKeys, withInsertData])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle],\n  )\n\n  const renderLeaf = useCallback(\n    (lProps: RenderLeafProps & {leaf: Text & {placeholder?: boolean}}) => {\n      const rendered = (\n        <Leaf\n          {...lProps}\n          schemaTypes={schemaTypes}\n          renderAnnotation={renderAnnotation}\n          renderChild={renderChild}\n          renderDecorator={renderDecorator}\n          readOnly={readOnly}\n        />\n      )\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === '') {\n        return (\n          <>\n            <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n              {renderPlaceholder()}\n            </span>\n            {rendered}\n          </>\n        )\n      }\n      return rendered\n    },\n    [readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder, schemaTypes],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`)\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            change$.next({type: 'selection', selection: normalizedSelection})\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [propsSelection, slateEditor, blockTypeName, change$])\n\n  // Subscribe to change$ and restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    debug('Subscribing to editor changes$')\n    const sub = change$.subscribe((next: EditorChange): void => {\n      switch (next.type) {\n        case 'ready':\n          restoreSelectionFromProps()\n          break\n        case 'invalidValue':\n          setHasInvalidValue(true)\n          break\n        case 'value':\n          setHasInvalidValue(false)\n          break\n        default:\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes$')\n      sub.unsubscribe()\n    }\n  }, [change$, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      event.preventDefault()\n      if (!slateEditor.selection) {\n        return\n      }\n      if (!onPaste) {\n        debug('Pasting normally')\n        slateEditor.insertData(event.clipboardData)\n        return\n      }\n      // Resolve it as promise (can be either async promise or sync return value)\n      new Promise<OnPasteResult>((resolve) => {\n        const value = PortableTextEditor.getValue(portableTextEditor)\n        const ptRange = toPortableTextRange(value, slateEditor.selection, schemaTypes)\n        const path = ptRange?.focus.path || []\n        resolve(\n          onPaste({\n            event,\n            value,\n            path,\n            schemaTypes,\n          }),\n        )\n      })\n        .then((result) => {\n          debug('Custom paste function from client resolved', result)\n          change$.next({type: 'loading', isLoading: true})\n          if (!result || !result.insert) {\n            debug('No result from custom paste handler, pasting normally')\n            slateEditor.insertData(event.clipboardData)\n            return\n          }\n          if (result && result.insert) {\n            slateEditor.insertFragment(\n              toSlateValue(result.insert as PortableTextBlock[], {schemaTypes}),\n            )\n            change$.next({type: 'loading', isLoading: false})\n            return\n          }\n          console.warn('Your onPaste function returned something unexpected:', result)\n        })\n        .catch((error) => {\n          change$.next({type: 'loading', isLoading: false})\n          console.error(error) // eslint-disable-line no-console\n          return error\n        })\n    },\n    [change$, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: React.FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        change$.next({type: 'focus', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          change$.next({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [onFocus, portableTextEditor, change$, slateEditor],\n  )\n\n  const handleOnBlur: React.FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        change$.next({type: 'blur', event})\n      }\n    },\n    [change$, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(slateEditor, slateEditor.selection)\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch (error) {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n    },\n    [props, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate = useCallback(() => {\n    if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        },\n      ]\n    }\n    return EMPTY_DECORATORS\n  }, [schemaTypes, slateEditor])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(slateEditor, slateEditor) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n"],"names":["compileType","rawType","Schema","compile","name","types","get","getPortableTextMemberSchemaTypes","portableTextType","_a","_b","_c","Error","blockType","of","find","findBlockType","childrenField","fields","field","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","rootName","debug","debugWithName","namespace","concat","enabled","defaultKeyGenerator","randomKey","PortableTextEditorKeyGeneratorContext","createContext","usePortableTextEditorKeyGenerator","keyGenerator","useContext","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_PROCESSING_LOCAL_CHANGES","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","isHighSurrogate","char","charCode","charCodeAt","isLowSurrogate","cloneDiff","diff","patch","getCommonOverlap","textA","textB","text1","text2","text1Length","text2Length","substring","textLength","Math","min","best","found","pattern","indexOf","getCommonPrefix","pointerMin","pointerMax","pointerMid","pointerStart","floor","getCommonSuffix","pointerEnd","cleanupSemantic","rawDiffs","diffs","map","hasChanges","equalities","equalitiesLength","lastEquality","pointer","lengthInsertions1","lengthDeletions1","lengthInsertions2","lengthDeletions2","DIFF_EQUAL","DIFF_INSERT","max","splice","DIFF_DELETE","cleanupMerge","cleanupSemanticLossless","deletion","insertion","overlapLength1","overlapLength2","nonAlphaNumericRegex","whitespaceRegex","linebreakRegex","blanklineEndRegex","blanklineStartRegex","diffCleanupSemanticScore","one","two","char1","charAt","char2","nonAlphaNumeric1","match","nonAlphaNumeric2","whitespace1","whitespace2","lineBreak1","lineBreak2","blankLine1","blankLine2","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","push","countDelete","countInsert","textDelete","textInsert","commonlength","pop","trueCount","_len","arguments","args","Array","_key","reduce","n","bool","cleanupEfficiency","editCost","undefined","preIns","preDel","postIns","postDel","bisect","deadline","maxD","ceil","vOffset","vLength","v1","v2","x","delta","front","k1start","k1end","k2start","k2end","d","Date","now","k1","k1Offset","x1","y1","k2Offset","x2","bisectSplit","k2","y2","y","text1a","text2a","text1b","text2b","doDiff","checkLines","diffsb","findHalfMatch","timeout","longText","shortText","halfMatch1","halfMatchI","halfMatch2","halfMatch","text1A","text1B","text2A","text2B","midCommon","i","seed","slice","j","bestCommon","bestLongTextA","bestLongTextB","bestShortTextA","bestShortTextB","prefixLength","suffixLength","charsToLines","lineArray","chars","text","join","linesToChars","lineHash","diffLinesToMunge","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","String","fromCharCode","maxLines","chars1","chars2","doLineModeDiff","opts","a","linearray","aa","computeDiff","longtext","shorttext","diffsA","diffsB","createInternalOpts","adjustDiffForSurrogatePairs","commonprefix","commonsuffix","unshift","createDeadLine","t","Number","MAX_VALUE","combineChar","data","dir","splitChar","hasSharedChar","deisolateChar","inv","insertIdx","deleteIdx","op","rest","insertText","insertChar","deleteText","diffType","diffText","firstChar","lastChar","DEFAULT_OPTIONS","threshold","distance","applyDefaults","MAX_BITS$1","bitap","loc","s","getAlphabetFromPattern","getBitapScore","e","accuracy","proximity","abs","scoreThreshold","bestLoc","lastIndexOf","matchmask","binMin","binMid","binMax","lastRd","start","finish","rd","charMatch","searchLocation","createPatchObject","start1","start2","utf8Start1","utf8Start2","length1","length2","utf8Length1","utf8Length2","diffText1","diffText2","countUtf8Bytes","str","bytes","codePoint","codePointAt","utf8len","adjustIndiciesToUcs2","patches","base","byteOffset","idx","advanceTo","target","allowExceedingIndices","adjusted","MAX_BITS","DEFAULT_MARGIN","DEFAULT_OPTS","margin","getDefaultOpts","make","b","_make","isArray","patchDiffLength","charCount1","charCount2","utf8Count1","utf8Count2","prepatchText","postpatchText","currentDiff","diffTextLength","diffByteLength","addContext","padding","prefixStart","prefix","prefixUtf8Length","suffixEnd","suffix","suffixUtf8Length","levenshtein","leven","insertions","deletions","xIndex","lastChars1","lastChars2","addPadding","paddingLength","nullPadding","p","firstDiffLength","extraLength","splitMax","patchSize","bigpatch","preContext","empty","precontextByteCount","diffTextByteCount","shift","postContext","postContextByteCount","apply","apply$4","originalText","parsed","deleteThreshold","results","expectedLoc","startLoc","endLoc","index1","index2","mod","stringify","stringifyPatch","coords1","coords2","encodeURI","replace","patchHeader","parse","textline","lines","split","textPointer","m","toInt","currentLine","sign","decodeURI","ex","utf8Diff","num","parseInt","setIfMissing","path","diffMatchPatch","diffMatchPatch$1","currentValue","nextValue","makePatches","stringifyPatches","insert","insert$1","items","position","set","unset","EMPTY_MARKDEFS","EMPTY_MARKS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","isEqual","toSlateValue","_ref","schemaTypes","_type","voidChildren","marks","isPortableText","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","__inline","Element","isElement","fromSlateValue","textBlockType","_cType","v","k","_i","blockValue","isEqualToEmptyEditor","Text","isText","createOperationToPatches","textBlockName","insertTextPatch","editor","operation","beforeValue","JSON","isTextBlock","textChild","isTextSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","default","newProperties","isUndefined","blockKey","childKey","Object","keys","forEach","keyName","val","insertNodePatch","targetKey","node","blk","splitNodePatch","splitBlock","oldBlock","targetValue","spansToUnset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","targetBlock","newBlock","mergedSpan","targetSpan","moveNodePatch","newPath","targetChild","childToInsert","createKeyedPath","point","blockPath","keyedBlockPath","keyedChildPath","childPath","createArrayedPath","from","Editor","nodes","at","isKeySegment","isVoid","childIndex","findIndex","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","toSlateRange","selection","removeAllDocumentSelectionRanges","hasEditorSelection","domSelection","window","getSelection","removeAllRanges","createWithEditableAPI","portableTextEditor","withEditableAPI","setEditable","ReactEditor","blur","toggleMark","mark","pteToggleMark","toggleList","listStyle","pteToggleListItem","toggleBlockStyle","blockStyle","pteToggleBlockStyle","isMarkActive","pteIsMarkActive","err","console","warn","undo","redo","select","slateSelection","Transforms","deselect","onChange","focusBlock","Node","descendant","focusChild","ptBlock","insertChild","some","focusChildPath","isSpanNode","focusNode","move","unit","insertNodes","insertBlock","insertNode","hasBlockStyle","pteHasBlockStyle","hasListStyle","pteHasListStyle","element","includes","findByPath","slatePath","ptChild","findDOMNode","item","toDOMNode","activeAnnotations","spans","depth","def","addAnnotation","SlateElement","annotationKey","setNodes","Range","isCollapsed","pteExpandToWord","textNode","withoutNormalizing","normalize","newSelection","end","spanPath","markDefPath","delete","hasRange","mode","hanging","voids","removeNodes","createPlaceholderBlock","removeAnnotation","nodePath","isExpanded","_ref2","newMarks","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","insertBreak","createWithMaxBlocks","maxBlocks","withMaxBlocks","rows","PRESERVE_KEYS","withPreserveKeys","fn","prev","isPreservingKeys","createWithObjectKeys","withKeys","normalizeNode","properties","withNewKey","isEditor","entry","PATCHING","withoutPatching","isPatching","BEFORE","AFTER","array","index","_len2","_key2","flatten","len","normalizedIdx","copy","_len3","values","_key3","hasOwn","prototype","call","bind","arr","to","findTargetIndex","pathSegment","apply$3","head","tail","applyPatch","apply$2","clone","isObject","omit","OPERATIONS","_currentValue","_nextValue","inc","dec","SUPPORTED_PATCH_TYPES","apply$1","result","applyPatches","parsePatch","func","applyAll","_apply","applyArrayPatch","isString","applyStringPatch","applyObjectPatch","applyPrimitivePatch","res","debugVerbose","createApplyPatch","previousPatch","changed","insertPatch","unsetPatch","setPatch","error","findBlockAndChildFromPath","isSpanTextDiffMatchPatch","newValue","diffMatchPatchApplyPatches","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","childrenToInsert","targetChildIndex","childInsertPath","newText","oldText","nextRest","prevChildren","prevRest","c","cIndex","newVal","previousSelection","blockIndex","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","withRemoteChanges","isChangingRemotely","isChangingLocally","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","readOnly","patches$","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","subscribe","_ref3","snapshot","reset","origin","history","undos","redos","time","unsubscribe","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shouldClear","otherPatches","transformedOperations","transformOperation","withoutSaving","Operation","inverse","reverse","transformedOperation","insertBlockIndex","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","diffPatches","diffPatch","_d","adjustOffsetBy","changedOffset","every","_ref4","dType","currentFocus","currentAnchor","newFocus","newAnchor","points","level","Path","equals","createWithPatches","_ref5","change$","patchFunctions","previousChildren","withPatches","bufferedPatches","handleBufferedRemotePatches","handlePatches","_ref6","editorWasEmpty","editorIsEmpty","next","previousValue","createWithPlaceholderBlock","_ref7","withPlaceholderBlock","createWithPortableTextBlockStyle","defaultStyle","withPortableTextBlockStyle","nodeEntry","SlateText","selectedBlocks","_ref8","MAX_LIST_LEVEL","createWithPortableTextLists","withPortableTextLists","listItemStyle","isActive","pteUnsetListItem","pteSetListItem","_ref9","isListBlock","listItem","newNode","_ref10","pteEndList","_ref11","pteIncrementBlockLevels","_ref12","createWithPortableTextMarkModel","withPortableTextMarkModel","forceNewSelection","mergeSpans","isSpan","targetPath","oldDefs","newMarkDefs","uniq","isNormalized","isElementProps","normalizeMarkDefs","splitNodes","marksWithoutAnnotationMarks","addMark","splitTextNodes","shouldRemoveMark","removeMark","_ref13","eMark","existingMarks","_ref14","parent","nextPath","nextNode","mergeNodes","blocks","createWithPortableTextSelections","prevSelection","withPortableTextSelections","emitPortableTextSelection","createWithSchemaTypes","_ref15","withSchemaTypes","isPortableTextTextBlock","isPortableTextSpan","isPortableTextListBlock","obj","isInline","inlineSchemaTypes","key","createWithUtils","_ref16","withUtils","focusOffset","charsBefore","charsAfter","isEmpty","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","setSelection","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","createEmptyBlock","withHotKeys","pteWithHotKeys","event","cat","hotkey","isHotkey","nativeEvent","preventDefault","possibleMark","possibleCommand","command","isEnter","isTab","isShiftEnter","isShiftTab","isBackspace","isDelete","prevPath","previous","stopPropagation","isEmptyFocusBlock","nextBlock","focusBlockPath","hasAnnotationFocus","edges","atStartOfNode","isStart","endAtEndOfNode","isEnd","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","action","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","allUsedMarks","cld","annotationMarks","orphanedMarks","spanChildren","orphaned","cMrk","newSpan","newChild","childType","createWithInsertData","withInsertData","blockTypeName","spanTypeName","toPlainText","title","setFragmentData","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","attributes","hasAttribute","div","ownerDocument","createElement","appendChild","setAttribute","body","asHTML","innerHTML","removeChild","fragment","getFragment","asJSON","asPlainText","clearData","setData","insertPortableTextData","pText","getData","slateValue","_regenerateKeys","validation","errorDescription","_insertFragment","insertTextOrHTMLData","isLoading","html","insertedType","htmlToBlocks","normalizeBlock","escapeHtml","textToHtml","insertData","insertFragmentData","insertFragment","entityMap","oldKey","newKey","nodeWithNewKeys","isPasteToEmptyEditor","originalFnMap","withPlugins","destroy","operationToPatches","withObjectKeys","withUndoRedo","originalFunctions","noop","unsubscribes","subscribeFn","unsubscribeFn","SlateContainer","props","slateEditor","useMemo","_sub","withReact","createEditor","useEffect","initialValue","Slate","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorContext","usePortableTextEditor","PortableTextEditorValueContext","PortableTextEditorReadOnlyContext","usePortableTextEditorReadOnlyStatus","CURRENT_VALUE","useSyncValue","useRef","useSlate","updateValueFunctionRef","updateFromCurrentValue","useCallback","current","updateValueDebounced","debounce","trailing","leading","updateFunction","isProcessingLocalChanges","isProcessingRemoteChanges","isChanged","isValid","hadSelection","childrenLength","_","slateValueFromProps","currentBlock","currentBlockIndex","validationValue","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","Synchronizer","useState","pendingPatches","syncValue","onFlushPendingPatches","PortableTextEditor","onFlushPendingPatchesThrottled","throttle","isNormalizing","startTransition","handleOnline","handleOffline","addEventListener","removeEventListener","isInitialValueFromProps","jsx","Provider","React","Component","constructor","Subject","editable","schemaType","incomingPatches$","componentDidUpdate","prevProps","render","_patches$","toString","Boolean","isObjectPath","isChildObjectEditPath","isBlockObjectEditPath","compactPatches","lastPatch","finalPatches","nextPatch","normalizePoint","newOffset","normalizeSelection","DefaultAnnotation","handleClick","alert","annotation","color","onClick","Leaf","leaf","renderChild","renderDecorator","renderAnnotation","spanRef","blockSelected","useSelected","focused","setFocused","selected","setSelected","decoratorValues","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","winSelection","rangeCount","getRangeAt","intersectsNode","content","returnedChildren","_props","defineProperty","editorElementRef","enumerable","ref","_child","defaultRendered","DefaultObject","DefaultBlockObject","styled","__template","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","bullets","normalizedLevel","DraggableBlock","_ref17","blockRef","useSlateStatic","dragGhostRef","isDragOver","setIsDragOver","blockElement","setBlockElement","handleDragOver","isMyDragOver","dataTransfer","dropEffect","elementRect","getBoundingClientRect","top","height","Y","pageY","handleDragLeave","handleDragEnd","document","dragPosition","findPath","myPath","isBefore","originalPath","moveNodes","handleDrop","handleDrag","HTMLElement","opacity","handleDragStart","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","left","boxSizing","rect","clientX","clientY","width","setDragImage","isDraggingOverFirstBlock","isDraggingOverLastBlock","isDraggingOverTop","isDraggingOverBottom","dropIndicator","className","borderBottom","zIndex","jsxs","draggable","onDragStart","onDrag","onDragOver","onDragLeave","onDragEnd","onDrop","EMPTY_ANNOTATIONS","inlineBlockStyle","display","_ref18","renderBlock","renderListItem","renderStyle","spellCheck","inlineBlockObjectRef","renderedBlock","elmPath","contentEditable","ObjectNode","isListItem","blockStyleType","listType","renderProps","propsOrDefaultRendered","renderedBlockFromProps","useIsomorphicEffect","useLayoutEffect","useForwardedRef","innerRef","PLACEHOLDER_STYLE","userSelect","pointerEvents","right","EMPTY_DECORATORS","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBlur","onFocus","onBeforeInput","onPaste","onCopy","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","Fragment","restoreSelectionFromProps","normalizedSelection","slateRange","o","handleCopy","handlePaste","clipboardData","Promise","resolve","then","catch","handleOnFocus","isDefaultPrevented","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","scrollSelectionIntoViewToSlate","decorate","SlateEditable","Editable","autoFocus","onDOMBeforeInput"],"mappings":"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","x_google_ignoreList":[5]}